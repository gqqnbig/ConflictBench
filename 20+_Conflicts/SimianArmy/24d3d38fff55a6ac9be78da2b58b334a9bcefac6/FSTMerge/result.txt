Found the following features in expression file:
left
base
right
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/Paper/bowen-icsme-2023-data/ConflictBench/20_Conflicts/workspace/left/src/main/java/com/netflix/simianarmy/client/aws/AWSClient.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/Paper/bowen-icsme-2023-data/ConflictBench/20_Conflicts/workspace/left/src/main/java/com/netflix/simianarmy/client/aws/AWSClient.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/Paper/bowen-icsme-2023-data/ConflictBench/20_Conflicts/workspace/base/src/main/java/com/netflix/simianarmy/client/aws/AWSClient.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/Paper/bowen-icsme-2023-data/ConflictBench/20_Conflicts/workspace/base/src/main/java/com/netflix/simianarmy/client/aws/AWSClient.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/Paper/bowen-icsme-2023-data/ConflictBench/20_Conflicts/workspace/right/src/main/java/com/netflix/simianarmy/client/aws/AWSClient.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/Paper/bowen-icsme-2023-data/ConflictBench/20_Conflicts/workspace/right/src/main/java/com/netflix/simianarmy/client/aws/AWSClient.java
[NT -> left : Feature]
	[NT -> src : Folder]
		[NT -> main : Folder]
			[NT -> java : Folder]
				[NT -> com : Folder]
					[NT -> netflix : Folder]
						[NT -> simianarmy : Folder]
							[NT -> client : Folder]
								[NT -> aws : Folder]
									[NT -> AWSClient.java : Java-File]
										[NT -> - : CompilationUnit]
											[T -> - : PackageDeclaration "package com.netflix.simianarmy.client.aws;" compose:Replacement merge: Default]
											[T -> com.amazonaws.AmazonServiceException{ImportPackage} : ImportDeclaration "import com.amazonaws.AmazonServiceException;" compose:Replacement merge: Default]
											[T -> com.amazonaws.auth.AWSCredentialsProvider{ImportPackage} : ImportDeclaration "import com.amazonaws.auth.AWSCredentialsProvider;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.autoscaling.AmazonAutoScalingClient{ImportPackage} : ImportDeclaration "import com.amazonaws.services.autoscaling.AmazonAutoScalingClient;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.autoscaling.model.AutoScalingGroup{ImportPackage} : ImportDeclaration "import com.amazonaws.services.autoscaling.model.AutoScalingGroup;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.autoscaling.model.AutoScalingInstanceDetails{ImportPackage} : ImportDeclaration "import com.amazonaws.services.autoscaling.model.AutoScalingInstanceDetails;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.autoscaling.model.DeleteAutoScalingGroupRequest{ImportPackage} : ImportDeclaration "import com.amazonaws.services.autoscaling.model.DeleteAutoScalingGroupRequest;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.autoscaling.model.DeleteLaunchConfigurationRequest{ImportPackage} : ImportDeclaration "import com.amazonaws.services.autoscaling.model.DeleteLaunchConfigurationRequest;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.autoscaling.model.DescribeAutoScalingGroupsRequest{ImportPackage} : ImportDeclaration "import com.amazonaws.services.autoscaling.model.DescribeAutoScalingGroupsRequest;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.autoscaling.model.DescribeAutoScalingGroupsResult{ImportPackage} : ImportDeclaration "import com.amazonaws.services.autoscaling.model.DescribeAutoScalingGroupsResult;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.autoscaling.model.DescribeAutoScalingInstancesRequest{ImportPackage} : ImportDeclaration "import com.amazonaws.services.autoscaling.model.DescribeAutoScalingInstancesRequest;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.autoscaling.model.DescribeAutoScalingInstancesResult{ImportPackage} : ImportDeclaration "import com.amazonaws.services.autoscaling.model.DescribeAutoScalingInstancesResult;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.autoscaling.model.DescribeLaunchConfigurationsRequest{ImportPackage} : ImportDeclaration "import com.amazonaws.services.autoscaling.model.DescribeLaunchConfigurationsRequest;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.autoscaling.model.DescribeLaunchConfigurationsResult{ImportPackage} : ImportDeclaration "import com.amazonaws.services.autoscaling.model.DescribeLaunchConfigurationsResult;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.autoscaling.model.LaunchConfiguration{ImportPackage} : ImportDeclaration "import com.amazonaws.services.autoscaling.model.LaunchConfiguration;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.AmazonEC2{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.AmazonEC2;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.AmazonEC2Client{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.AmazonEC2Client;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.CreateTagsRequest{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.CreateTagsRequest;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.DeleteSnapshotRequest{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.DeleteSnapshotRequest;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.DeleteVolumeRequest{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.DeleteVolumeRequest;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.DeregisterImageRequest{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.DeregisterImageRequest;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.DescribeImagesRequest{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.DescribeImagesRequest;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.DescribeImagesResult{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.DescribeImagesResult;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.DescribeInstancesRequest{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.DescribeInstancesRequest;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.DescribeInstancesResult{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.DescribeInstancesResult;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.DescribeSnapshotsRequest{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.DescribeSnapshotsRequest;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.DescribeSnapshotsResult{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.DescribeSnapshotsResult;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.DescribeVolumesRequest{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.DescribeVolumesRequest;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.DescribeVolumesResult{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.DescribeVolumesResult;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.DetachVolumeRequest{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.DetachVolumeRequest;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.EbsInstanceBlockDevice{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.EbsInstanceBlockDevice;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.Image{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.Image;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.Instance{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.Instance;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.InstanceBlockDeviceMapping{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.InstanceBlockDeviceMapping;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.ModifyInstanceAttributeRequest{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.ModifyInstanceAttributeRequest;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.Reservation{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.Reservation;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.Snapshot{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.Snapshot;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.Tag{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.Tag;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.TerminateInstancesRequest{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.TerminateInstancesRequest;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.Volume{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.Volume;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.elasticloadbalancing.AmazonElasticLoadBalancingClient{ImportPackage} : ImportDeclaration "import com.amazonaws.services.elasticloadbalancing.AmazonElasticLoadBalancingClient;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.elasticloadbalancing.model.DescribeLoadBalancersRequest{ImportPackage} : ImportDeclaration "import com.amazonaws.services.elasticloadbalancing.model.DescribeLoadBalancersRequest;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.elasticloadbalancing.model.DescribeLoadBalancersResult{ImportPackage} : ImportDeclaration "import com.amazonaws.services.elasticloadbalancing.model.DescribeLoadBalancersResult;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.elasticloadbalancing.model.LoadBalancerDescription{ImportPackage} : ImportDeclaration "import com.amazonaws.services.elasticloadbalancing.model.LoadBalancerDescription;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.simpledb.AmazonSimpleDB{ImportPackage} : ImportDeclaration "import com.amazonaws.services.simpledb.AmazonSimpleDB;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.simpledb.AmazonSimpleDBClient{ImportPackage} : ImportDeclaration "import com.amazonaws.services.simpledb.AmazonSimpleDBClient;" compose:Replacement merge: Default]
											[T -> com.google.common.base.Strings{ImportPackage} : ImportDeclaration "import com.google.common.base.Strings;" compose:Replacement merge: Default]
											[T -> com.netflix.simianarmy.CloudClient{ImportPackage} : ImportDeclaration "import com.netflix.simianarmy.CloudClient;" compose:Replacement merge: Default]
											[T -> com.netflix.simianarmy.NotFoundException{ImportPackage} : ImportDeclaration "import com.netflix.simianarmy.NotFoundException;" compose:Replacement merge: Default]
											[T -> org.apache.commons.lang.Validate{ImportPackage} : ImportDeclaration "import org.apache.commons.lang.Validate;" compose:Replacement merge: Default]
											[T -> org.slf4j.Logger{ImportPackage} : ImportDeclaration "import org.slf4j.Logger;" compose:Replacement merge: Default]
											[T -> org.slf4j.LoggerFactory{ImportPackage} : ImportDeclaration "import org.slf4j.LoggerFactory;" compose:Replacement merge: Default]
											[T -> java.util.ArrayList{ImportPackage} : ImportDeclaration "import java.util.ArrayList;" compose:Replacement merge: Default]
											[T -> java.util.Arrays{ImportPackage} : ImportDeclaration "import java.util.Arrays;" compose:Replacement merge: Default]
											[T -> java.util.LinkedList{ImportPackage} : ImportDeclaration "import java.util.LinkedList;" compose:Replacement merge: Default]
											[T -> java.util.List{ImportPackage} : ImportDeclaration "import java.util.List;" compose:Replacement merge: Default]
											[T -> java.util.Map{ImportPackage} : ImportDeclaration "import java.util.Map;" compose:Replacement merge: Default]
											[NT -> AWSClient : ClassDeclaration]
												[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
												[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
												[T -> AWSClient : Id "AWSClient" compose:Replacement merge: Default]
												[T -> ImplList : ImplementsList "implements CloudClient" compose:Replacement merge: SemanticConflict]
												[T -> LOGGER : FieldDecl "private static final Logger LOGGER = LoggerFactory.getLogger(AWSClient.class);" compose:Replacement merge: SemanticConflict]
												[T -> region : FieldDecl "private final String region;" compose:Replacement merge: SemanticConflict]
												[T -> awsCredentialsProvider : FieldDecl "private final AWSCredentialsProvider awsCredentialsProvider;" compose:Replacement merge: SemanticConflict]
												[T -> AWSClient(String-String) : ConstructorDecl "public AWSClient(String region) {         this.region = region;         this.awsCredentialsProvider = null;     }" compose:Replacement merge: LineBased]
												[T -> AWSClient(String-String-AWSCredentialsProvider-AWSCredentialsProvider) : ConstructorDecl "public AWSClient(String region, AWSCredentialsProvider awsCredentialsProvider) {         this.region = region;         this.awsCredentialsProvider = awsCredentialsProvider;     }" compose:Replacement merge: LineBased]
												[T -> region({FormalParametersInternal}) : MethodDecl "public String region() {         return region;     }" compose:Replacement merge: LineBased]
												[T -> ec2Client({FormalParametersInternal}) : MethodDecl "protected AmazonEC2 ec2Client() {         AmazonEC2 client;         if (awsCredentialsProvider == null) {             client = new AmazonEC2Client();         } else {             client = new AmazonEC2Client(awsCredentialsProvider);         }         client.setEndpoint("ec2." + region + ".amazonaws.com");         return client;     }" compose:Replacement merge: LineBased]
												[T -> asgClient({FormalParametersInternal}) : MethodDecl "protected AmazonAutoScalingClient asgClient() {         AmazonAutoScalingClient client;         if (awsCredentialsProvider == null) {             client = new AmazonAutoScalingClient();         } else {             client = new AmazonAutoScalingClient(awsCredentialsProvider);         }         client.setEndpoint("autoscaling." + region + ".amazonaws.com");         return client;     }" compose:Replacement merge: LineBased]
												[T -> elbClient({FormalParametersInternal}) : MethodDecl "protected AmazonElasticLoadBalancingClient elbClient() {         AmazonElasticLoadBalancingClient client;         if (awsCredentialsProvider == null) {             client = new AmazonElasticLoadBalancingClient();         } else {             client = new AmazonElasticLoadBalancingClient(awsCredentialsProvider);         }         client.setEndpoint("elasticloadbalancing." + region + ".amazonaws.com");         return client;     }" compose:Replacement merge: LineBased]
												[T -> sdbClient({FormalParametersInternal}) : MethodDecl "public AmazonSimpleDB sdbClient() {         AmazonSimpleDB client;         if (awsCredentialsProvider == null) {             client = new AmazonSimpleDBClient();         } else {             client = new AmazonSimpleDBClient(awsCredentialsProvider);         }         // us-east-1 has special naming         // http://docs.amazonwebservices.com/general/latest/gr/rande.html#sdb_region         if (region == null || region.equals("us-east-1")) {             client.setEndpoint("sdb.amazonaws.com");         } else {             client.setEndpoint("sdb." + region + ".amazonaws.com");         }         return client;     }" compose:Replacement merge: LineBased]
												[T -> describeAutoScalingGroups({FormalParametersInternal}) : MethodDecl "public List<AutoScalingGroup> describeAutoScalingGroups() {         return describeAutoScalingGroups((String[]) null);     }" compose:Replacement merge: LineBased]
												[T -> describeAutoScalingGroups(String-String) : MethodDecl "public List<AutoScalingGroup> describeAutoScalingGroups(String... names) {         if (names == null || names.length == 0) {             LOGGER.info(String.format("Getting all auto-scaling groups in region %s.", region));         } else {             LOGGER.info(String.format("Getting auto-scaling groups for %d names in region %s.", names.length, region));         }          List<AutoScalingGroup> asgs = new LinkedList<AutoScalingGroup>();          AmazonAutoScalingClient asgClient = asgClient();         DescribeAutoScalingGroupsRequest request = new DescribeAutoScalingGroupsRequest();         if (names != null) {             request.setAutoScalingGroupNames(Arrays.asList(names));         }         DescribeAutoScalingGroupsResult result = asgClient.describeAutoScalingGroups(request);          asgs.addAll(result.getAutoScalingGroups());         while (result.getNextToken() != null) {             request.setNextToken(result.getNextToken());             result = asgClient.describeAutoScalingGroups(request);             asgs.addAll(result.getAutoScalingGroups());         }          LOGGER.info(String.format("Got %d auto-scaling groups in region %s.", asgs.size(), region));         return asgs;     }" compose:Replacement merge: LineBased]
												[T -> describeElasticLoadBalancers(String-String) : MethodDecl "public List<LoadBalancerDescription> describeElasticLoadBalancers(String... names) {         if (names == null || names.length == 0) {             LOGGER.info(String.format("Getting all ELBs in region %s.", region));         } else {             LOGGER.info(String.format("Getting ELBs for %d names in region %s.", names.length, region));         }          AmazonElasticLoadBalancingClient elbClient = elbClient();         DescribeLoadBalancersRequest request = new DescribeLoadBalancersRequest().withLoadBalancerNames(names);         DescribeLoadBalancersResult result = elbClient.describeLoadBalancers(request);         List<LoadBalancerDescription> elbs = result.getLoadBalancerDescriptions();         LOGGER.info(String.format("Got %d ELBs in region %s.", elbs.size(), region));         return elbs;     }" compose:Replacement merge: LineBased]
												[T -> describeAutoScalingInstances(String-String) : MethodDecl "public List<AutoScalingInstanceDetails> describeAutoScalingInstances(String... instanceIds) {         if (instanceIds == null || instanceIds.length == 0) {             LOGGER.info(String.format("Getting all auto-scaling instances in region %s.", region));         } else {             LOGGER.info(String.format("Getting auto-scaling instances for %d ids in region %s.",                     instanceIds.length, region));         }          List<AutoScalingInstanceDetails> instances = new LinkedList<AutoScalingInstanceDetails>();          AmazonAutoScalingClient asgClient = asgClient();         DescribeAutoScalingInstancesRequest request = new DescribeAutoScalingInstancesRequest();         if (instanceIds != null) {             request.setInstanceIds(Arrays.asList(instanceIds));         }         DescribeAutoScalingInstancesResult result = asgClient.describeAutoScalingInstances(request);          instances.addAll(result.getAutoScalingInstances());         while (result.getNextToken() != null) {             request = request.withNextToken(result.getNextToken());             result = asgClient.describeAutoScalingInstances(request);             instances.addAll(result.getAutoScalingInstances());         }          LOGGER.info(String.format("Got %d auto-scaling instances.", instances.size()));         return instances;     }" compose:Replacement merge: LineBased]
												[T -> describeInstances(String-String) : MethodDecl "public List<Instance> describeInstances(String... instanceIds) {         if (instanceIds == null || instanceIds.length == 0) {             LOGGER.info(String.format("Getting all EC2 instances in region %s.", region));         } else {             LOGGER.info(String.format("Getting EC2 instances for %d ids in region %s.", instanceIds.length, region));         }          List<Instance> instances = new LinkedList<Instance>();          AmazonEC2 ec2Client = ec2Client();         DescribeInstancesRequest request = new DescribeInstancesRequest();         if (instanceIds != null) {             request.withInstanceIds(Arrays.asList(instanceIds));         }         DescribeInstancesResult result = ec2Client.describeInstances(request);         for (Reservation reservation : result.getReservations()) {             instances.addAll(reservation.getInstances());         }          LOGGER.info(String.format("Got %d EC2 instances in region %s.", instances.size(), region));         return instances;     }" compose:Replacement merge: LineBased]
												[T -> describeLaunchConfigurations(String-String) : MethodDecl "public List<LaunchConfiguration> describeLaunchConfigurations(String... names) {         if (names == null || names.length == 0) {             LOGGER.info(String.format("Getting all launch configurations in region %s.", region));         } else {             LOGGER.info(String.format("Getting launch configurations for %d names in region %s.",                     names.length, region));         }          List<LaunchConfiguration> lcs = new LinkedList<LaunchConfiguration>();          AmazonAutoScalingClient asgClient = asgClient();         DescribeLaunchConfigurationsRequest request = new DescribeLaunchConfigurationsRequest()         .withLaunchConfigurationNames(names);         DescribeLaunchConfigurationsResult result = asgClient.describeLaunchConfigurations(request);          lcs.addAll(result.getLaunchConfigurations());         while (result.getNextToken() != null) {             request.setNextToken(result.getNextToken());             result = asgClient.describeLaunchConfigurations(request);             lcs.addAll(result.getLaunchConfigurations());         }          LOGGER.info(String.format("Got %d launch configurations in region %s.", lcs.size(), region));         return lcs;     }" compose:Replacement merge: LineBased]
												[T -> deleteAutoScalingGroup(String-String) : MethodDecl "@Override     public void deleteAutoScalingGroup(String asgName) {         Validate.notEmpty(asgName);         LOGGER.info(String.format("Deleting auto-scaling group with name %s in region %s.", asgName, region));         AmazonAutoScalingClient asgClient = asgClient();         DeleteAutoScalingGroupRequest request = new DeleteAutoScalingGroupRequest()         .withAutoScalingGroupName(asgName);         asgClient.deleteAutoScalingGroup(request);     }" compose:Replacement merge: LineBased]
												[T -> deleteLaunchConfiguration(String-String) : MethodDecl "@Override     public void deleteLaunchConfiguration(String launchConfigName) {         Validate.notEmpty(launchConfigName);         LOGGER.info(String.format("Deleting launch configuration with name %s in region %s.",                 launchConfigName, region));         AmazonAutoScalingClient asgClient = asgClient();         DeleteLaunchConfigurationRequest request = new DeleteLaunchConfigurationRequest()                 .withLaunchConfigurationName(launchConfigName);         asgClient.deleteLaunchConfiguration(request);     }" compose:Replacement merge: LineBased]
												[T -> deleteImage(String-String) : MethodDecl "@Override     public void deleteImage(String imageId) {         Validate.notEmpty(imageId);         LOGGER.info(String.format("Deleting image %s in region %s.",                 imageId, region));         AmazonEC2 ec2Client = ec2Client();         DeregisterImageRequest request = new DeregisterImageRequest(imageId);         ec2Client.deregisterImage(request);     }" compose:Replacement merge: LineBased]
												[T -> deleteVolume(String-String) : MethodDecl "@Override     public void deleteVolume(String volumeId) {         Validate.notEmpty(volumeId);         LOGGER.info(String.format("Deleting volume %s in region %s.", volumeId, region));         AmazonEC2 ec2Client = ec2Client();         DeleteVolumeRequest request = new DeleteVolumeRequest().withVolumeId(volumeId);         ec2Client.deleteVolume(request);     }" compose:Replacement merge: LineBased]
												[T -> deleteSnapshot(String-String) : MethodDecl "@Override     public void deleteSnapshot(String snapshotId) {         Validate.notEmpty(snapshotId);         LOGGER.info(String.format("Deleting snapshot %s in region %s.", snapshotId, region));         AmazonEC2 ec2Client = ec2Client();         DeleteSnapshotRequest request = new DeleteSnapshotRequest().withSnapshotId(snapshotId);         ec2Client.deleteSnapshot(request);     }" compose:Replacement merge: LineBased]
												[T -> terminateInstance(String-String) : MethodDecl "@Override     public void terminateInstance(String instanceId) {         Validate.notEmpty(instanceId);         LOGGER.info(String.format("Terminating instance %s in region %s.", instanceId, region));         try {             ec2Client().terminateInstances(new TerminateInstancesRequest(Arrays.asList(instanceId)));         } catch (AmazonServiceException e) {             if (e.getErrorCode().equals("InvalidInstanceID.NotFound")) {                 throw new NotFoundException("AWS instance " + instanceId + " not found", e);             }             throw e;         }     }" compose:Replacement merge: LineBased]
												[T -> setSecurityGroups(String-String-List<String>-List<String>) : MethodDecl "@Override     public void setSecurityGroups(String instanceId, List<String> groups) {         Validate.notEmpty(instanceId);         LOGGER.info(String.format("Removing all security groups from instance %s in region %s.", instanceId, region));         try {             ModifyInstanceAttributeRequest request = new ModifyInstanceAttributeRequest();             request.setInstanceId(instanceId);             request.setGroups(groups);             ec2Client().modifyInstanceAttribute(request);         } catch (AmazonServiceException e) {             if (e.getErrorCode().equals("InvalidInstanceID.NotFound")) {                 throw new NotFoundException("AWS instance " + instanceId + " not found", e);             }             throw e;         }     }" compose:Replacement merge: LineBased]
												[T -> describeVolumes(String-String) : MethodDecl "public List<Volume> describeVolumes(String... volumeIds) {         if (volumeIds == null || volumeIds.length == 0) {             LOGGER.info(String.format("Getting all EBS volumes in region %s.", region));         } else {             LOGGER.info(String.format("Getting EBS volumes for %d ids in region %s.", volumeIds.length, region));         }          AmazonEC2 ec2Client = ec2Client();         DescribeVolumesRequest request = new DescribeVolumesRequest();         if (volumeIds != null) {             request.setVolumeIds(Arrays.asList(volumeIds));         }         DescribeVolumesResult result = ec2Client.describeVolumes(request);         List<Volume> volumes = result.getVolumes();          LOGGER.info(String.format("Got %d EBS volumes in region %s.", volumes.size(), region));         return volumes;     }" compose:Replacement merge: LineBased]
												[T -> describeSnapshots(String-String) : MethodDecl "public List<Snapshot> describeSnapshots(String... snapshotIds) {         if (snapshotIds == null || snapshotIds.length == 0) {             LOGGER.info(String.format("Getting all EBS snapshots in region %s.", region));         } else {             LOGGER.info(String.format("Getting EBS snapshotIds for %d ids in region %s.", snapshotIds.length, region));         }          AmazonEC2 ec2Client = ec2Client();         DescribeSnapshotsRequest request = new DescribeSnapshotsRequest();         // Set the owner id to self to avoid getting snapshots from other accounts.         request.withOwnerIds(Arrays.<String>asList("self"));         if (snapshotIds != null) {             request.setSnapshotIds(Arrays.asList(snapshotIds));         }         DescribeSnapshotsResult result = ec2Client.describeSnapshots(request);         List<Snapshot> snapshots = result.getSnapshots();          LOGGER.info(String.format("Got %d EBS snapshots in region %s.", snapshots.size(), region));         return snapshots;     }" compose:Replacement merge: LineBased]
												[T -> createTagsForResources(Map<String,String>-Map<String,String>-String-String) : MethodDecl "@Override     public void createTagsForResources(Map<String, String> keyValueMap, String... resourceIds) {         Validate.notNull(keyValueMap);         Validate.notEmpty(keyValueMap);         Validate.notNull(resourceIds);         Validate.notEmpty(resourceIds);         AmazonEC2 ec2Client = ec2Client();         List<Tag> tags = new ArrayList<Tag>();         for (Map.Entry<String, String> entry : keyValueMap.entrySet()) {             tags.add(new Tag(entry.getKey(), entry.getValue()));         }         CreateTagsRequest req = new CreateTagsRequest(Arrays.asList(resourceIds), tags);         ec2Client.createTags(req);     }" compose:Replacement merge: LineBased]
												[T -> describeImages(String-String) : MethodDecl "public List<Image> describeImages(String... imageIds) {         if (imageIds == null || imageIds.length == 0) {             LOGGER.info(String.format("Getting all AMIs in region %s.", region));         } else {             LOGGER.info(String.format("Getting AMIs for %d ids in region %s.", imageIds.length, region));         }          AmazonEC2 ec2Client = ec2Client();         DescribeImagesRequest request = new DescribeImagesRequest();         if (imageIds != null) {             request.setImageIds(Arrays.asList(imageIds));         }         DescribeImagesResult result = ec2Client.describeImages(request);         List<Image> images = result.getImages();          LOGGER.info(String.format("Got %d AMIs in region %s.", images.size(), region));         return images;     }" compose:Replacement merge: LineBased]
												[T -> detachVolume(String-String-String-String-boolean-boolean) : MethodDecl "@Override     public void detachVolume(String instanceId, String volumeId, boolean force) {         Validate.notEmpty(instanceId);         LOGGER.info(String.format("Detach volumes from instance %s in region %s.", instanceId, region));         try {             DetachVolumeRequest detachVolumeRequest = new DetachVolumeRequest();             detachVolumeRequest.setForce(force);             detachVolumeRequest.setInstanceId(instanceId);             detachVolumeRequest.setVolumeId(volumeId);             ec2Client().detachVolume(detachVolumeRequest);         } catch (AmazonServiceException e) {             if (e.getErrorCode().equals("InvalidInstanceID.NotFound")) {                 throw new NotFoundException("AWS instance " + instanceId + " not found", e);             }             throw e;         }     }" compose:Replacement merge: LineBased]
												[T -> listAttachedVolumes(String-String-boolean-boolean) : MethodDecl "@Override     public List<String> listAttachedVolumes(String instanceId, boolean includeRoot) {         Validate.notEmpty(instanceId);         LOGGER.info(String.format("Listing volumes attached to instance %s in region %s.", instanceId, region));         try {             List<String> volumeIds = new ArrayList<String>();             for (Instance instance : describeInstances(instanceId)) {                 String rootDeviceName = instance.getRootDeviceName();                  for (InstanceBlockDeviceMapping ibdm : instance.getBlockDeviceMappings()) {                     EbsInstanceBlockDevice ebs = ibdm.getEbs();                     if (ebs == null) {                         continue;                     }                      String volumeId = ebs.getVolumeId();                     if (Strings.isNullOrEmpty(volumeId)) {                         continue;                     }                      if (!includeRoot && rootDeviceName != null) {                         if (rootDeviceName.equals(ibdm.getDeviceName())) {                             continue;                         }                     }                      volumeIds.add(volumeId);                 }             }             return volumeIds;         } catch (AmazonServiceException e) {             if (e.getErrorCode().equals("InvalidInstanceID.NotFound")) {                 throw new NotFoundException("AWS instance " + instanceId + " not found", e);             }             throw e;         }     }" compose:Replacement merge: LineBased]
[NT -> base : Feature]
	[NT -> src : Folder]
		[NT -> main : Folder]
			[NT -> java : Folder]
				[NT -> com : Folder]
					[NT -> netflix : Folder]
						[NT -> simianarmy : Folder]
							[NT -> client : Folder]
								[NT -> aws : Folder]
									[NT -> AWSClient.java : Java-File]
										[NT -> - : CompilationUnit]
											[T -> - : PackageDeclaration "package com.netflix.simianarmy.client.aws;" compose:Replacement merge: Default]
											[T -> com.amazonaws.AmazonServiceException{ImportPackage} : ImportDeclaration "import com.amazonaws.AmazonServiceException;" compose:Replacement merge: Default]
											[T -> com.amazonaws.auth.AWSCredentialsProvider{ImportPackage} : ImportDeclaration "import com.amazonaws.auth.AWSCredentialsProvider;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.autoscaling.AmazonAutoScalingClient{ImportPackage} : ImportDeclaration "import com.amazonaws.services.autoscaling.AmazonAutoScalingClient;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.autoscaling.model.AutoScalingGroup{ImportPackage} : ImportDeclaration "import com.amazonaws.services.autoscaling.model.AutoScalingGroup;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.autoscaling.model.AutoScalingInstanceDetails{ImportPackage} : ImportDeclaration "import com.amazonaws.services.autoscaling.model.AutoScalingInstanceDetails;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.autoscaling.model.DeleteAutoScalingGroupRequest{ImportPackage} : ImportDeclaration "import com.amazonaws.services.autoscaling.model.DeleteAutoScalingGroupRequest;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.autoscaling.model.DeleteLaunchConfigurationRequest{ImportPackage} : ImportDeclaration "import com.amazonaws.services.autoscaling.model.DeleteLaunchConfigurationRequest;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.autoscaling.model.DescribeAutoScalingGroupsRequest{ImportPackage} : ImportDeclaration "import com.amazonaws.services.autoscaling.model.DescribeAutoScalingGroupsRequest;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.autoscaling.model.DescribeAutoScalingGroupsResult{ImportPackage} : ImportDeclaration "import com.amazonaws.services.autoscaling.model.DescribeAutoScalingGroupsResult;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.autoscaling.model.DescribeAutoScalingInstancesRequest{ImportPackage} : ImportDeclaration "import com.amazonaws.services.autoscaling.model.DescribeAutoScalingInstancesRequest;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.autoscaling.model.DescribeAutoScalingInstancesResult{ImportPackage} : ImportDeclaration "import com.amazonaws.services.autoscaling.model.DescribeAutoScalingInstancesResult;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.autoscaling.model.DescribeLaunchConfigurationsRequest{ImportPackage} : ImportDeclaration "import com.amazonaws.services.autoscaling.model.DescribeLaunchConfigurationsRequest;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.autoscaling.model.DescribeLaunchConfigurationsResult{ImportPackage} : ImportDeclaration "import com.amazonaws.services.autoscaling.model.DescribeLaunchConfigurationsResult;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.autoscaling.model.LaunchConfiguration{ImportPackage} : ImportDeclaration "import com.amazonaws.services.autoscaling.model.LaunchConfiguration;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.AmazonEC2{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.AmazonEC2;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.AmazonEC2Client{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.AmazonEC2Client;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.CreateTagsRequest{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.CreateTagsRequest;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.DeleteSnapshotRequest{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.DeleteSnapshotRequest;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.DeleteVolumeRequest{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.DeleteVolumeRequest;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.DeregisterImageRequest{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.DeregisterImageRequest;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.DescribeImagesRequest{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.DescribeImagesRequest;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.DescribeImagesResult{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.DescribeImagesResult;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.DescribeInstancesRequest{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.DescribeInstancesRequest;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.DescribeInstancesResult{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.DescribeInstancesResult;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.DescribeSnapshotsRequest{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.DescribeSnapshotsRequest;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.DescribeSnapshotsResult{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.DescribeSnapshotsResult;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.DescribeVolumesRequest{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.DescribeVolumesRequest;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.DescribeVolumesResult{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.DescribeVolumesResult;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.Image{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.Image;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.Instance{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.Instance;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.ModifyInstanceAttributeRequest{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.ModifyInstanceAttributeRequest;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.Reservation{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.Reservation;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.Snapshot{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.Snapshot;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.Tag{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.Tag;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.TerminateInstancesRequest{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.TerminateInstancesRequest;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.Volume{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.Volume;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.elasticloadbalancing.AmazonElasticLoadBalancingClient{ImportPackage} : ImportDeclaration "import com.amazonaws.services.elasticloadbalancing.AmazonElasticLoadBalancingClient;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.elasticloadbalancing.model.DescribeLoadBalancersRequest{ImportPackage} : ImportDeclaration "import com.amazonaws.services.elasticloadbalancing.model.DescribeLoadBalancersRequest;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.elasticloadbalancing.model.DescribeLoadBalancersResult{ImportPackage} : ImportDeclaration "import com.amazonaws.services.elasticloadbalancing.model.DescribeLoadBalancersResult;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.elasticloadbalancing.model.LoadBalancerDescription{ImportPackage} : ImportDeclaration "import com.amazonaws.services.elasticloadbalancing.model.LoadBalancerDescription;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.simpledb.AmazonSimpleDB{ImportPackage} : ImportDeclaration "import com.amazonaws.services.simpledb.AmazonSimpleDB;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.simpledb.AmazonSimpleDBClient{ImportPackage} : ImportDeclaration "import com.amazonaws.services.simpledb.AmazonSimpleDBClient;" compose:Replacement merge: Default]
											[T -> com.netflix.simianarmy.CloudClient{ImportPackage} : ImportDeclaration "import com.netflix.simianarmy.CloudClient;" compose:Replacement merge: Default]
											[T -> com.netflix.simianarmy.NotFoundException{ImportPackage} : ImportDeclaration "import com.netflix.simianarmy.NotFoundException;" compose:Replacement merge: Default]
											[T -> org.apache.commons.lang.Validate{ImportPackage} : ImportDeclaration "import org.apache.commons.lang.Validate;" compose:Replacement merge: Default]
											[T -> org.slf4j.Logger{ImportPackage} : ImportDeclaration "import org.slf4j.Logger;" compose:Replacement merge: Default]
											[T -> org.slf4j.LoggerFactory{ImportPackage} : ImportDeclaration "import org.slf4j.LoggerFactory;" compose:Replacement merge: Default]
											[T -> java.util.ArrayList{ImportPackage} : ImportDeclaration "import java.util.ArrayList;" compose:Replacement merge: Default]
											[T -> java.util.Arrays{ImportPackage} : ImportDeclaration "import java.util.Arrays;" compose:Replacement merge: Default]
											[T -> java.util.LinkedList{ImportPackage} : ImportDeclaration "import java.util.LinkedList;" compose:Replacement merge: Default]
											[T -> java.util.List{ImportPackage} : ImportDeclaration "import java.util.List;" compose:Replacement merge: Default]
											[T -> java.util.Map{ImportPackage} : ImportDeclaration "import java.util.Map;" compose:Replacement merge: Default]
											[NT -> AWSClient : ClassDeclaration]
												[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
												[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
												[T -> AWSClient : Id "AWSClient" compose:Replacement merge: Default]
												[T -> ImplList : ImplementsList "implements CloudClient" compose:Replacement merge: SemanticConflict]
												[T -> LOGGER : FieldDecl "private static final Logger LOGGER = LoggerFactory.getLogger(AWSClient.class);" compose:Replacement merge: SemanticConflict]
												[T -> region : FieldDecl "private final String region;" compose:Replacement merge: SemanticConflict]
												[T -> awsCredentialsProvider : FieldDecl "private final AWSCredentialsProvider awsCredentialsProvider;" compose:Replacement merge: SemanticConflict]
												[T -> AWSClient(String-String) : ConstructorDecl "public AWSClient(String region) {         this.region = region;         this.awsCredentialsProvider = null;     }" compose:Replacement merge: LineBased]
												[T -> AWSClient(String-String-AWSCredentialsProvider-AWSCredentialsProvider) : ConstructorDecl "public AWSClient(String region, AWSCredentialsProvider awsCredentialsProvider) {         this.region = region;         this.awsCredentialsProvider = awsCredentialsProvider;     }" compose:Replacement merge: LineBased]
												[T -> region({FormalParametersInternal}) : MethodDecl "public String region() {         return region;     }" compose:Replacement merge: LineBased]
												[T -> ec2Client({FormalParametersInternal}) : MethodDecl "protected AmazonEC2 ec2Client() {         AmazonEC2 client;         if (awsCredentialsProvider == null) {             client = new AmazonEC2Client();         } else {             client = new AmazonEC2Client(awsCredentialsProvider);         }         client.setEndpoint("ec2." + region + ".amazonaws.com");         return client;     }" compose:Replacement merge: LineBased]
												[T -> asgClient({FormalParametersInternal}) : MethodDecl "protected AmazonAutoScalingClient asgClient() {         AmazonAutoScalingClient client;         if (awsCredentialsProvider == null) {             client = new AmazonAutoScalingClient();         } else {             client = new AmazonAutoScalingClient(awsCredentialsProvider);         }         client.setEndpoint("autoscaling." + region + ".amazonaws.com");         return client;     }" compose:Replacement merge: LineBased]
												[T -> elbClient({FormalParametersInternal}) : MethodDecl "protected AmazonElasticLoadBalancingClient elbClient() {         AmazonElasticLoadBalancingClient client;         if (awsCredentialsProvider == null) {             client = new AmazonElasticLoadBalancingClient();         } else {             client = new AmazonElasticLoadBalancingClient(awsCredentialsProvider);         }         client.setEndpoint("elasticloadbalancing." + region + ".amazonaws.com");         return client;     }" compose:Replacement merge: LineBased]
												[T -> sdbClient({FormalParametersInternal}) : MethodDecl "public AmazonSimpleDB sdbClient() {         AmazonSimpleDB client;         if (awsCredentialsProvider == null) {             client = new AmazonSimpleDBClient();         } else {             client = new AmazonSimpleDBClient(awsCredentialsProvider);         }         // us-east-1 has special naming         // http://docs.amazonwebservices.com/general/latest/gr/rande.html#sdb_region         if (region == null || region.equals("us-east-1")) {             client.setEndpoint("sdb.amazonaws.com");         } else {             client.setEndpoint("sdb." + region + ".amazonaws.com");         }         return client;     }" compose:Replacement merge: LineBased]
												[T -> describeAutoScalingGroups({FormalParametersInternal}) : MethodDecl "public List<AutoScalingGroup> describeAutoScalingGroups() {         return describeAutoScalingGroups((String[]) null);     }" compose:Replacement merge: LineBased]
												[T -> describeAutoScalingGroups(String-String) : MethodDecl "public List<AutoScalingGroup> describeAutoScalingGroups(String... names) {         if (names == null || names.length == 0) {             LOGGER.info(String.format("Getting all auto-scaling groups in region %s.", region));         } else {             LOGGER.info(String.format("Getting auto-scaling groups for %d names in region %s.", names.length, region));         }          List<AutoScalingGroup> asgs = new LinkedList<AutoScalingGroup>();          AmazonAutoScalingClient asgClient = asgClient();         DescribeAutoScalingGroupsRequest request = new DescribeAutoScalingGroupsRequest();         if (names != null) {             request.setAutoScalingGroupNames(Arrays.asList(names));         }         DescribeAutoScalingGroupsResult result = asgClient.describeAutoScalingGroups(request);          asgs.addAll(result.getAutoScalingGroups());         while (result.getNextToken() != null) {             request.setNextToken(result.getNextToken());             result = asgClient.describeAutoScalingGroups(request);             asgs.addAll(result.getAutoScalingGroups());         }          LOGGER.info(String.format("Got %d auto-scaling groups in region %s.", asgs.size(), region));         return asgs;     }" compose:Replacement merge: LineBased]
												[T -> describeElasticLoadBalancers(String-String) : MethodDecl "public List<LoadBalancerDescription> describeElasticLoadBalancers(String... names) {         if (names == null || names.length == 0) {             LOGGER.info(String.format("Getting all ELBs in region %s.", region));         } else {             LOGGER.info(String.format("Getting ELBs for %d names in region %s.", names.length, region));         }          AmazonElasticLoadBalancingClient elbClient = elbClient();         DescribeLoadBalancersRequest request = new DescribeLoadBalancersRequest().withLoadBalancerNames(names);         DescribeLoadBalancersResult result = elbClient.describeLoadBalancers(request);         List<LoadBalancerDescription> elbs = result.getLoadBalancerDescriptions();         LOGGER.info(String.format("Got %d ELBs in region %s.", elbs.size(), region));         return elbs;     }" compose:Replacement merge: LineBased]
												[T -> describeAutoScalingInstances(String-String) : MethodDecl "public List<AutoScalingInstanceDetails> describeAutoScalingInstances(String... instanceIds) {         if (instanceIds == null || instanceIds.length == 0) {             LOGGER.info(String.format("Getting all auto-scaling instances in region %s.", region));         } else {             LOGGER.info(String.format("Getting auto-scaling instances for %d ids in region %s.",                     instanceIds.length, region));         }          List<AutoScalingInstanceDetails> instances = new LinkedList<AutoScalingInstanceDetails>();          AmazonAutoScalingClient asgClient = asgClient();         DescribeAutoScalingInstancesRequest request = new DescribeAutoScalingInstancesRequest();         if (instanceIds != null) {             request.setInstanceIds(Arrays.asList(instanceIds));         }         DescribeAutoScalingInstancesResult result = asgClient.describeAutoScalingInstances(request);          instances.addAll(result.getAutoScalingInstances());         while (result.getNextToken() != null) {             request = request.withNextToken(result.getNextToken());             result = asgClient.describeAutoScalingInstances(request);             instances.addAll(result.getAutoScalingInstances());         }          LOGGER.info(String.format("Got %d auto-scaling instances.", instances.size()));         return instances;     }" compose:Replacement merge: LineBased]
												[T -> describeInstances(String-String) : MethodDecl "public List<Instance> describeInstances(String... instanceIds) {         if (instanceIds == null || instanceIds.length == 0) {             LOGGER.info(String.format("Getting all EC2 instances in region %s.", region));         } else {             LOGGER.info(String.format("Getting EC2 instances for %d ids in region %s.", instanceIds.length, region));         }          List<Instance> instances = new LinkedList<Instance>();          AmazonEC2 ec2Client = ec2Client();         DescribeInstancesRequest request = new DescribeInstancesRequest();         if (instanceIds != null) {             request.withInstanceIds(Arrays.asList(instanceIds));         }         DescribeInstancesResult result = ec2Client.describeInstances(request);         for (Reservation reservation : result.getReservations()) {             instances.addAll(reservation.getInstances());         }          LOGGER.info(String.format("Got %d EC2 instances in region %s.", instances.size(), region));         return instances;     }" compose:Replacement merge: LineBased]
												[T -> describeLaunchConfigurations(String-String) : MethodDecl "public List<LaunchConfiguration> describeLaunchConfigurations(String... names) {         if (names == null || names.length == 0) {             LOGGER.info(String.format("Getting all launch configurations in region %s.", region));         } else {             LOGGER.info(String.format("Getting launch configurations for %d names in region %s.",                     names.length, region));         }          List<LaunchConfiguration> lcs = new LinkedList<LaunchConfiguration>();          AmazonAutoScalingClient asgClient = asgClient();         DescribeLaunchConfigurationsRequest request = new DescribeLaunchConfigurationsRequest()         .withLaunchConfigurationNames(names);         DescribeLaunchConfigurationsResult result = asgClient.describeLaunchConfigurations(request);          lcs.addAll(result.getLaunchConfigurations());         while (result.getNextToken() != null) {             request.setNextToken(result.getNextToken());             result = asgClient.describeLaunchConfigurations(request);             lcs.addAll(result.getLaunchConfigurations());         }          LOGGER.info(String.format("Got %d launch configurations in region %s.", lcs.size(), region));         return lcs;     }" compose:Replacement merge: LineBased]
												[T -> deleteAutoScalingGroup(String-String) : MethodDecl "@Override     public void deleteAutoScalingGroup(String asgName) {         Validate.notEmpty(asgName);         LOGGER.info(String.format("Deleting auto-scaling group with name %s in region %s.", asgName, region));         AmazonAutoScalingClient asgClient = asgClient();         DeleteAutoScalingGroupRequest request = new DeleteAutoScalingGroupRequest()         .withAutoScalingGroupName(asgName);         asgClient.deleteAutoScalingGroup(request);     }" compose:Replacement merge: LineBased]
												[T -> deleteLaunchConfiguration(String-String) : MethodDecl "@Override     public void deleteLaunchConfiguration(String launchConfigName) {         Validate.notEmpty(launchConfigName);         LOGGER.info(String.format("Deleting launch configuration with name %s in region %s.",                 launchConfigName, region));         AmazonAutoScalingClient asgClient = asgClient();         DeleteLaunchConfigurationRequest request = new DeleteLaunchConfigurationRequest()                 .withLaunchConfigurationName(launchConfigName);         asgClient.deleteLaunchConfiguration(request);     }" compose:Replacement merge: LineBased]
												[T -> deleteImage(String-String) : MethodDecl "@Override     public void deleteImage(String imageId) {         Validate.notEmpty(imageId);         LOGGER.info(String.format("Deleting image %s in region %s.",                 imageId, region));         AmazonEC2 ec2Client = ec2Client();         DeregisterImageRequest request = new DeregisterImageRequest(imageId);         ec2Client.deregisterImage(request);     }" compose:Replacement merge: LineBased]
												[T -> deleteVolume(String-String) : MethodDecl "@Override     public void deleteVolume(String volumeId) {         Validate.notEmpty(volumeId);         LOGGER.info(String.format("Deleting volume %s in region %s.", volumeId, region));         AmazonEC2 ec2Client = ec2Client();         DeleteVolumeRequest request = new DeleteVolumeRequest().withVolumeId(volumeId);         ec2Client.deleteVolume(request);     }" compose:Replacement merge: LineBased]
												[T -> deleteSnapshot(String-String) : MethodDecl "@Override     public void deleteSnapshot(String snapshotId) {         Validate.notEmpty(snapshotId);         LOGGER.info(String.format("Deleting snapshot %s in region %s.", snapshotId, region));         AmazonEC2 ec2Client = ec2Client();         DeleteSnapshotRequest request = new DeleteSnapshotRequest().withSnapshotId(snapshotId);         ec2Client.deleteSnapshot(request);     }" compose:Replacement merge: LineBased]
												[T -> terminateInstance(String-String) : MethodDecl "@Override     public void terminateInstance(String instanceId) {         Validate.notEmpty(instanceId);         LOGGER.info(String.format("Terminating instance %s in region %s.", instanceId, region));         try {             ec2Client().terminateInstances(new TerminateInstancesRequest(Arrays.asList(instanceId)));         } catch (AmazonServiceException e) {             if (e.getErrorCode().equals("InvalidInstanceID.NotFound")) {                 throw new NotFoundException("AWS instance " + instanceId + " not found", e);             }             throw e;         }     }" compose:Replacement merge: LineBased]
												[T -> setSecurityGroups(String-String-List<String>-List<String>) : MethodDecl "@Override     public void setSecurityGroups(String instanceId, List<String> groups) {         Validate.notEmpty(instanceId);         LOGGER.info(String.format("Removing all security groups from instance %s in region %s.", instanceId, region));         try {             ModifyInstanceAttributeRequest request = new ModifyInstanceAttributeRequest();             request.setInstanceId(instanceId);             request.setGroups(groups);             ec2Client().modifyInstanceAttribute(request);         } catch (AmazonServiceException e) {             if (e.getErrorCode().equals("InvalidInstanceID.NotFound")) {                 throw new NotFoundException("AWS instance " + instanceId + " not found", e);             }             throw e;         }     }" compose:Replacement merge: LineBased]
												[T -> describeVolumes(String-String) : MethodDecl "public List<Volume> describeVolumes(String... volumeIds) {         if (volumeIds == null || volumeIds.length == 0) {             LOGGER.info(String.format("Getting all EBS volumes in region %s.", region));         } else {             LOGGER.info(String.format("Getting EBS volumes for %d ids in region %s.", volumeIds.length, region));         }          AmazonEC2 ec2Client = ec2Client();         DescribeVolumesRequest request = new DescribeVolumesRequest();         if (volumeIds != null) {             request.setVolumeIds(Arrays.asList(volumeIds));         }         DescribeVolumesResult result = ec2Client.describeVolumes(request);         List<Volume> volumes = result.getVolumes();          LOGGER.info(String.format("Got %d EBS volumes in region %s.", volumes.size(), region));         return volumes;     }" compose:Replacement merge: LineBased]
												[T -> describeSnapshots(String-String) : MethodDecl "public List<Snapshot> describeSnapshots(String... snapshotIds) {         if (snapshotIds == null || snapshotIds.length == 0) {             LOGGER.info(String.format("Getting all EBS snapshots in region %s.", region));         } else {             LOGGER.info(String.format("Getting EBS snapshotIds for %d ids in region %s.", snapshotIds.length, region));         }          AmazonEC2 ec2Client = ec2Client();         DescribeSnapshotsRequest request = new DescribeSnapshotsRequest();         // Set the owner id to self to avoid getting snapshots from other accounts.         request.withOwnerIds(Arrays.<String>asList("self"));         if (snapshotIds != null) {             request.setSnapshotIds(Arrays.asList(snapshotIds));         }         DescribeSnapshotsResult result = ec2Client.describeSnapshots(request);         List<Snapshot> snapshots = result.getSnapshots();          LOGGER.info(String.format("Got %d EBS snapshots in region %s.", snapshots.size(), region));         return snapshots;     }" compose:Replacement merge: LineBased]
												[T -> createTagsForResources(Map<String,String>-Map<String,String>-String-String) : MethodDecl "@Override     public void createTagsForResources(Map<String, String> keyValueMap, String... resourceIds) {         Validate.notNull(keyValueMap);         Validate.notEmpty(keyValueMap);         Validate.notNull(resourceIds);         Validate.notEmpty(resourceIds);         AmazonEC2 ec2Client = ec2Client();         List<Tag> tags = new ArrayList<Tag>();         for (Map.Entry<String, String> entry : keyValueMap.entrySet()) {             tags.add(new Tag(entry.getKey(), entry.getValue()));         }         CreateTagsRequest req = new CreateTagsRequest(Arrays.asList(resourceIds), tags);         ec2Client.createTags(req);     }" compose:Replacement merge: LineBased]
												[T -> describeImages(String-String) : MethodDecl "public List<Image> describeImages(String... imageIds) {         if (imageIds == null || imageIds.length == 0) {             LOGGER.info(String.format("Getting all AMIs in region %s.", region));         } else {             LOGGER.info(String.format("Getting AMIs for %d ids in region %s.", imageIds.length, region));         }          AmazonEC2 ec2Client = ec2Client();         DescribeImagesRequest request = new DescribeImagesRequest();         if (imageIds != null) {             request.setImageIds(Arrays.asList(imageIds));         }         DescribeImagesResult result = ec2Client.describeImages(request);         List<Image> images = result.getImages();          LOGGER.info(String.format("Got %d AMIs in region %s.", images.size(), region));         return images;     }" compose:Replacement merge: LineBased]
[NT -> right : Feature]
	[NT -> src : Folder]
		[NT -> main : Folder]
			[NT -> java : Folder]
				[NT -> com : Folder]
					[NT -> netflix : Folder]
						[NT -> simianarmy : Folder]
							[NT -> client : Folder]
								[NT -> aws : Folder]
									[NT -> AWSClient.java : Java-File]
										[NT -> - : CompilationUnit]
											[T -> - : PackageDeclaration "package com.netflix.simianarmy.client.aws;" compose:Replacement merge: Default]
											[T -> com.amazonaws.AmazonServiceException{ImportPackage} : ImportDeclaration "import com.amazonaws.AmazonServiceException;" compose:Replacement merge: Default]
											[T -> com.amazonaws.auth.AWSCredentialsProvider{ImportPackage} : ImportDeclaration "import com.amazonaws.auth.AWSCredentialsProvider;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.autoscaling.AmazonAutoScalingClient{ImportPackage} : ImportDeclaration "import com.amazonaws.services.autoscaling.AmazonAutoScalingClient;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.autoscaling.model.AutoScalingGroup{ImportPackage} : ImportDeclaration "import com.amazonaws.services.autoscaling.model.AutoScalingGroup;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.autoscaling.model.AutoScalingInstanceDetails{ImportPackage} : ImportDeclaration "import com.amazonaws.services.autoscaling.model.AutoScalingInstanceDetails;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.autoscaling.model.DeleteAutoScalingGroupRequest{ImportPackage} : ImportDeclaration "import com.amazonaws.services.autoscaling.model.DeleteAutoScalingGroupRequest;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.autoscaling.model.DeleteLaunchConfigurationRequest{ImportPackage} : ImportDeclaration "import com.amazonaws.services.autoscaling.model.DeleteLaunchConfigurationRequest;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.autoscaling.model.DescribeAutoScalingGroupsRequest{ImportPackage} : ImportDeclaration "import com.amazonaws.services.autoscaling.model.DescribeAutoScalingGroupsRequest;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.autoscaling.model.DescribeAutoScalingGroupsResult{ImportPackage} : ImportDeclaration "import com.amazonaws.services.autoscaling.model.DescribeAutoScalingGroupsResult;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.autoscaling.model.DescribeAutoScalingInstancesRequest{ImportPackage} : ImportDeclaration "import com.amazonaws.services.autoscaling.model.DescribeAutoScalingInstancesRequest;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.autoscaling.model.DescribeAutoScalingInstancesResult{ImportPackage} : ImportDeclaration "import com.amazonaws.services.autoscaling.model.DescribeAutoScalingInstancesResult;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.autoscaling.model.DescribeLaunchConfigurationsRequest{ImportPackage} : ImportDeclaration "import com.amazonaws.services.autoscaling.model.DescribeLaunchConfigurationsRequest;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.autoscaling.model.DescribeLaunchConfigurationsResult{ImportPackage} : ImportDeclaration "import com.amazonaws.services.autoscaling.model.DescribeLaunchConfigurationsResult;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.autoscaling.model.LaunchConfiguration{ImportPackage} : ImportDeclaration "import com.amazonaws.services.autoscaling.model.LaunchConfiguration;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.AmazonEC2{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.AmazonEC2;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.AmazonEC2Client{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.AmazonEC2Client;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.CreateSecurityGroupRequest{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.CreateSecurityGroupRequest;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.CreateSecurityGroupResult{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.CreateSecurityGroupResult;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.CreateTagsRequest{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.CreateTagsRequest;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.DeleteSnapshotRequest{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.DeleteSnapshotRequest;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.DeleteVolumeRequest{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.DeleteVolumeRequest;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.DeregisterImageRequest{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.DeregisterImageRequest;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.DescribeImagesRequest{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.DescribeImagesRequest;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.DescribeImagesResult{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.DescribeImagesResult;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.DescribeInstancesRequest{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.DescribeInstancesRequest;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.DescribeInstancesResult{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.DescribeInstancesResult;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.DescribeSecurityGroupsRequest{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.DescribeSecurityGroupsRequest;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.DescribeSecurityGroupsResult{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.DescribeSecurityGroupsResult;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.DescribeSnapshotsRequest{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.DescribeSnapshotsRequest;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.DescribeSnapshotsResult{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.DescribeSnapshotsResult;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.DescribeVolumesRequest{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.DescribeVolumesRequest;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.DescribeVolumesResult{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.DescribeVolumesResult;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.Image{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.Image;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.Instance{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.Instance;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.ModifyInstanceAttributeRequest{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.ModifyInstanceAttributeRequest;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.Reservation{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.Reservation;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.SecurityGroup{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.SecurityGroup;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.Snapshot{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.Snapshot;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.Tag{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.Tag;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.TerminateInstancesRequest{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.TerminateInstancesRequest;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.ec2.model.Volume{ImportPackage} : ImportDeclaration "import com.amazonaws.services.ec2.model.Volume;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.elasticloadbalancing.AmazonElasticLoadBalancingClient{ImportPackage} : ImportDeclaration "import com.amazonaws.services.elasticloadbalancing.AmazonElasticLoadBalancingClient;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.elasticloadbalancing.model.DescribeLoadBalancersRequest{ImportPackage} : ImportDeclaration "import com.amazonaws.services.elasticloadbalancing.model.DescribeLoadBalancersRequest;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.elasticloadbalancing.model.DescribeLoadBalancersResult{ImportPackage} : ImportDeclaration "import com.amazonaws.services.elasticloadbalancing.model.DescribeLoadBalancersResult;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.elasticloadbalancing.model.LoadBalancerDescription{ImportPackage} : ImportDeclaration "import com.amazonaws.services.elasticloadbalancing.model.LoadBalancerDescription;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.simpledb.AmazonSimpleDB{ImportPackage} : ImportDeclaration "import com.amazonaws.services.simpledb.AmazonSimpleDB;" compose:Replacement merge: Default]
											[T -> com.amazonaws.services.simpledb.AmazonSimpleDBClient{ImportPackage} : ImportDeclaration "import com.amazonaws.services.simpledb.AmazonSimpleDBClient;" compose:Replacement merge: Default]
											[T -> com.netflix.simianarmy.CloudClient{ImportPackage} : ImportDeclaration "import com.netflix.simianarmy.CloudClient;" compose:Replacement merge: Default]
											[T -> com.netflix.simianarmy.NotFoundException{ImportPackage} : ImportDeclaration "import com.netflix.simianarmy.NotFoundException;" compose:Replacement merge: Default]
											[T -> org.apache.commons.lang.Validate{ImportPackage} : ImportDeclaration "import org.apache.commons.lang.Validate;" compose:Replacement merge: Default]
											[T -> org.slf4j.Logger{ImportPackage} : ImportDeclaration "import org.slf4j.Logger;" compose:Replacement merge: Default]
											[T -> org.slf4j.LoggerFactory{ImportPackage} : ImportDeclaration "import org.slf4j.LoggerFactory;" compose:Replacement merge: Default]
											[T -> java.util.ArrayList{ImportPackage} : ImportDeclaration "import java.util.ArrayList;" compose:Replacement merge: Default]
											[T -> java.util.Arrays{ImportPackage} : ImportDeclaration "import java.util.Arrays;" compose:Replacement merge: Default]
											[T -> java.util.LinkedList{ImportPackage} : ImportDeclaration "import java.util.LinkedList;" compose:Replacement merge: Default]
											[T -> java.util.List{ImportPackage} : ImportDeclaration "import java.util.List;" compose:Replacement merge: Default]
											[T -> java.util.Map{ImportPackage} : ImportDeclaration "import java.util.Map;" compose:Replacement merge: Default]
											[NT -> AWSClient : ClassDeclaration]
												[T -> - : Modifiers "public" compose:Replacement merge: SemanticConflict]
												[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
												[T -> AWSClient : Id "AWSClient" compose:Replacement merge: Default]
												[T -> ImplList : ImplementsList "implements CloudClient" compose:Replacement merge: SemanticConflict]
												[T -> LOGGER : FieldDecl "private static final Logger LOGGER = LoggerFactory.getLogger(AWSClient.class);" compose:Replacement merge: SemanticConflict]
												[T -> region : FieldDecl "private final String region;" compose:Replacement merge: SemanticConflict]
												[T -> awsCredentialsProvider : FieldDecl "private final AWSCredentialsProvider awsCredentialsProvider;" compose:Replacement merge: SemanticConflict]
												[T -> AWSClient(String-String) : ConstructorDecl "public AWSClient(String region) {         this.region = region;         this.awsCredentialsProvider = null;     }" compose:Replacement merge: LineBased]
												[T -> AWSClient(String-String-AWSCredentialsProvider-AWSCredentialsProvider) : ConstructorDecl "public AWSClient(String region, AWSCredentialsProvider awsCredentialsProvider) {         this.region = region;         this.awsCredentialsProvider = awsCredentialsProvider;     }" compose:Replacement merge: LineBased]
												[T -> region({FormalParametersInternal}) : MethodDecl "public String region() {         return region;     }" compose:Replacement merge: LineBased]
												[T -> ec2Client({FormalParametersInternal}) : MethodDecl "protected AmazonEC2 ec2Client() {         AmazonEC2 client;         if (awsCredentialsProvider == null) {             client = new AmazonEC2Client();         } else {             client = new AmazonEC2Client(awsCredentialsProvider);         }         client.setEndpoint("ec2." + region + ".amazonaws.com");         return client;     }" compose:Replacement merge: LineBased]
												[T -> asgClient({FormalParametersInternal}) : MethodDecl "protected AmazonAutoScalingClient asgClient() {         AmazonAutoScalingClient client;         if (awsCredentialsProvider == null) {             client = new AmazonAutoScalingClient();         } else {             client = new AmazonAutoScalingClient(awsCredentialsProvider);         }         client.setEndpoint("autoscaling." + region + ".amazonaws.com");         return client;     }" compose:Replacement merge: LineBased]
												[T -> elbClient({FormalParametersInternal}) : MethodDecl "protected AmazonElasticLoadBalancingClient elbClient() {         AmazonElasticLoadBalancingClient client;         if (awsCredentialsProvider == null) {             client = new AmazonElasticLoadBalancingClient();         } else {             client = new AmazonElasticLoadBalancingClient(awsCredentialsProvider);         }         client.setEndpoint("elasticloadbalancing." + region + ".amazonaws.com");         return client;     }" compose:Replacement merge: LineBased]
												[T -> sdbClient({FormalParametersInternal}) : MethodDecl "public AmazonSimpleDB sdbClient() {         AmazonSimpleDB client;         if (awsCredentialsProvider == null) {             client = new AmazonSimpleDBClient();         } else {             client = new AmazonSimpleDBClient(awsCredentialsProvider);         }         // us-east-1 has special naming         // http://docs.amazonwebservices.com/general/latest/gr/rande.html#sdb_region         if (region == null || region.equals("us-east-1")) {             client.setEndpoint("sdb.amazonaws.com");         } else {             client.setEndpoint("sdb." + region + ".amazonaws.com");         }         return client;     }" compose:Replacement merge: LineBased]
												[T -> describeAutoScalingGroups({FormalParametersInternal}) : MethodDecl "public List<AutoScalingGroup> describeAutoScalingGroups() {         return describeAutoScalingGroups((String[]) null);     }" compose:Replacement merge: LineBased]
												[T -> describeAutoScalingGroups(String-String) : MethodDecl "public List<AutoScalingGroup> describeAutoScalingGroups(String... names) {         if (names == null || names.length == 0) {             LOGGER.info(String.format("Getting all auto-scaling groups in region %s.", region));         } else {             LOGGER.info(String.format("Getting auto-scaling groups for %d names in region %s.", names.length, region));         }          List<AutoScalingGroup> asgs = new LinkedList<AutoScalingGroup>();          AmazonAutoScalingClient asgClient = asgClient();         DescribeAutoScalingGroupsRequest request = new DescribeAutoScalingGroupsRequest();         if (names != null) {             request.setAutoScalingGroupNames(Arrays.asList(names));         }         DescribeAutoScalingGroupsResult result = asgClient.describeAutoScalingGroups(request);          asgs.addAll(result.getAutoScalingGroups());         while (result.getNextToken() != null) {             request.setNextToken(result.getNextToken());             result = asgClient.describeAutoScalingGroups(request);             asgs.addAll(result.getAutoScalingGroups());         }          LOGGER.info(String.format("Got %d auto-scaling groups in region %s.", asgs.size(), region));         return asgs;     }" compose:Replacement merge: LineBased]
												[T -> describeElasticLoadBalancers(String-String) : MethodDecl "public List<LoadBalancerDescription> describeElasticLoadBalancers(String... names) {         if (names == null || names.length == 0) {             LOGGER.info(String.format("Getting all ELBs in region %s.", region));         } else {             LOGGER.info(String.format("Getting ELBs for %d names in region %s.", names.length, region));         }          AmazonElasticLoadBalancingClient elbClient = elbClient();         DescribeLoadBalancersRequest request = new DescribeLoadBalancersRequest().withLoadBalancerNames(names);         DescribeLoadBalancersResult result = elbClient.describeLoadBalancers(request);         List<LoadBalancerDescription> elbs = result.getLoadBalancerDescriptions();         LOGGER.info(String.format("Got %d ELBs in region %s.", elbs.size(), region));         return elbs;     }" compose:Replacement merge: LineBased]
												[T -> describeAutoScalingInstances(String-String) : MethodDecl "public List<AutoScalingInstanceDetails> describeAutoScalingInstances(String... instanceIds) {         if (instanceIds == null || instanceIds.length == 0) {             LOGGER.info(String.format("Getting all auto-scaling instances in region %s.", region));         } else {             LOGGER.info(String.format("Getting auto-scaling instances for %d ids in region %s.",                     instanceIds.length, region));         }          List<AutoScalingInstanceDetails> instances = new LinkedList<AutoScalingInstanceDetails>();          AmazonAutoScalingClient asgClient = asgClient();         DescribeAutoScalingInstancesRequest request = new DescribeAutoScalingInstancesRequest();         if (instanceIds != null) {             request.setInstanceIds(Arrays.asList(instanceIds));         }         DescribeAutoScalingInstancesResult result = asgClient.describeAutoScalingInstances(request);          instances.addAll(result.getAutoScalingInstances());         while (result.getNextToken() != null) {             request = request.withNextToken(result.getNextToken());             result = asgClient.describeAutoScalingInstances(request);             instances.addAll(result.getAutoScalingInstances());         }          LOGGER.info(String.format("Got %d auto-scaling instances.", instances.size()));         return instances;     }" compose:Replacement merge: LineBased]
												[T -> describeInstances(String-String) : MethodDecl "public List<Instance> describeInstances(String... instanceIds) {         if (instanceIds == null || instanceIds.length == 0) {             LOGGER.info(String.format("Getting all EC2 instances in region %s.", region));         } else {             LOGGER.info(String.format("Getting EC2 instances for %d ids in region %s.", instanceIds.length, region));         }          List<Instance> instances = new LinkedList<Instance>();          AmazonEC2 ec2Client = ec2Client();         DescribeInstancesRequest request = new DescribeInstancesRequest();         if (instanceIds != null) {             request.withInstanceIds(Arrays.asList(instanceIds));         }         DescribeInstancesResult result = ec2Client.describeInstances(request);         for (Reservation reservation : result.getReservations()) {             instances.addAll(reservation.getInstances());         }          LOGGER.info(String.format("Got %d EC2 instances in region %s.", instances.size(), region));         return instances;     }" compose:Replacement merge: LineBased]
												[T -> describeLaunchConfigurations(String-String) : MethodDecl "public List<LaunchConfiguration> describeLaunchConfigurations(String... names) {         if (names == null || names.length == 0) {             LOGGER.info(String.format("Getting all launch configurations in region %s.", region));         } else {             LOGGER.info(String.format("Getting launch configurations for %d names in region %s.",                     names.length, region));         }          List<LaunchConfiguration> lcs = new LinkedList<LaunchConfiguration>();          AmazonAutoScalingClient asgClient = asgClient();         DescribeLaunchConfigurationsRequest request = new DescribeLaunchConfigurationsRequest()         .withLaunchConfigurationNames(names);         DescribeLaunchConfigurationsResult result = asgClient.describeLaunchConfigurations(request);          lcs.addAll(result.getLaunchConfigurations());         while (result.getNextToken() != null) {             request.setNextToken(result.getNextToken());             result = asgClient.describeLaunchConfigurations(request);             lcs.addAll(result.getLaunchConfigurations());         }          LOGGER.info(String.format("Got %d launch configurations in region %s.", lcs.size(), region));         return lcs;     }" compose:Replacement merge: LineBased]
												[T -> deleteAutoScalingGroup(String-String) : MethodDecl "@Override     public void deleteAutoScalingGroup(String asgName) {         Validate.notEmpty(asgName);         LOGGER.info(String.format("Deleting auto-scaling group with name %s in region %s.", asgName, region));         AmazonAutoScalingClient asgClient = asgClient();         DeleteAutoScalingGroupRequest request = new DeleteAutoScalingGroupRequest()         .withAutoScalingGroupName(asgName);         asgClient.deleteAutoScalingGroup(request);     }" compose:Replacement merge: LineBased]
												[T -> deleteLaunchConfiguration(String-String) : MethodDecl "@Override     public void deleteLaunchConfiguration(String launchConfigName) {         Validate.notEmpty(launchConfigName);         LOGGER.info(String.format("Deleting launch configuration with name %s in region %s.",                 launchConfigName, region));         AmazonAutoScalingClient asgClient = asgClient();         DeleteLaunchConfigurationRequest request = new DeleteLaunchConfigurationRequest()                 .withLaunchConfigurationName(launchConfigName);         asgClient.deleteLaunchConfiguration(request);     }" compose:Replacement merge: LineBased]
												[T -> deleteImage(String-String) : MethodDecl "@Override     public void deleteImage(String imageId) {         Validate.notEmpty(imageId);         LOGGER.info(String.format("Deleting image %s in region %s.",                 imageId, region));         AmazonEC2 ec2Client = ec2Client();         DeregisterImageRequest request = new DeregisterImageRequest(imageId);         ec2Client.deregisterImage(request);     }" compose:Replacement merge: LineBased]
												[T -> deleteVolume(String-String) : MethodDecl "@Override     public void deleteVolume(String volumeId) {         Validate.notEmpty(volumeId);         LOGGER.info(String.format("Deleting volume %s in region %s.", volumeId, region));         AmazonEC2 ec2Client = ec2Client();         DeleteVolumeRequest request = new DeleteVolumeRequest().withVolumeId(volumeId);         ec2Client.deleteVolume(request);     }" compose:Replacement merge: LineBased]
												[T -> deleteSnapshot(String-String) : MethodDecl "@Override     public void deleteSnapshot(String snapshotId) {         Validate.notEmpty(snapshotId);         LOGGER.info(String.format("Deleting snapshot %s in region %s.", snapshotId, region));         AmazonEC2 ec2Client = ec2Client();         DeleteSnapshotRequest request = new DeleteSnapshotRequest().withSnapshotId(snapshotId);         ec2Client.deleteSnapshot(request);     }" compose:Replacement merge: LineBased]
												[T -> terminateInstance(String-String) : MethodDecl "@Override     public void terminateInstance(String instanceId) {         Validate.notEmpty(instanceId);         LOGGER.info(String.format("Terminating instance %s in region %s.", instanceId, region));         try {             ec2Client().terminateInstances(new TerminateInstancesRequest(Arrays.asList(instanceId)));         } catch (AmazonServiceException e) {             if (e.getErrorCode().equals("InvalidInstanceID.NotFound")) {                 throw new NotFoundException("AWS instance " + instanceId + " not found", e);             }             throw e;         }     }" compose:Replacement merge: LineBased]
												[T -> setInstanceSecurityGroups(String-String-List<String>-List<String>) : MethodDecl "public void setInstanceSecurityGroups(String instanceId, List<String> groups) {         Validate.notEmpty(instanceId);         LOGGER.info(String.format("Removing all security groups from instance %s in region %s.", instanceId, region));         try {             ModifyInstanceAttributeRequest request = new ModifyInstanceAttributeRequest();             request.setInstanceId(instanceId);             request.setGroups(groups);             ec2Client().modifyInstanceAttribute(request);         } catch (AmazonServiceException e) {             if (e.getErrorCode().equals("InvalidInstanceID.NotFound")) {                 throw new NotFoundException("AWS instance " + instanceId + " not found", e);             }             throw e;         }     }" compose:Replacement merge: LineBased]
												[T -> describeVolumes(String-String) : MethodDecl "public List<Volume> describeVolumes(String... volumeIds) {         if (volumeIds == null || volumeIds.length == 0) {             LOGGER.info(String.format("Getting all EBS volumes in region %s.", region));         } else {             LOGGER.info(String.format("Getting EBS volumes for %d ids in region %s.", volumeIds.length, region));         }          AmazonEC2 ec2Client = ec2Client();         DescribeVolumesRequest request = new DescribeVolumesRequest();         if (volumeIds != null) {             request.setVolumeIds(Arrays.asList(volumeIds));         }         DescribeVolumesResult result = ec2Client.describeVolumes(request);         List<Volume> volumes = result.getVolumes();          LOGGER.info(String.format("Got %d EBS volumes in region %s.", volumes.size(), region));         return volumes;     }" compose:Replacement merge: LineBased]
												[T -> describeSnapshots(String-String) : MethodDecl "public List<Snapshot> describeSnapshots(String... snapshotIds) {         if (snapshotIds == null || snapshotIds.length == 0) {             LOGGER.info(String.format("Getting all EBS snapshots in region %s.", region));         } else {             LOGGER.info(String.format("Getting EBS snapshotIds for %d ids in region %s.", snapshotIds.length, region));         }          AmazonEC2 ec2Client = ec2Client();         DescribeSnapshotsRequest request = new DescribeSnapshotsRequest();         // Set the owner id to self to avoid getting snapshots from other accounts.         request.withOwnerIds(Arrays.<String>asList("self"));         if (snapshotIds != null) {             request.setSnapshotIds(Arrays.asList(snapshotIds));         }         DescribeSnapshotsResult result = ec2Client.describeSnapshots(request);         List<Snapshot> snapshots = result.getSnapshots();          LOGGER.info(String.format("Got %d EBS snapshots in region %s.", snapshots.size(), region));         return snapshots;     }" compose:Replacement merge: LineBased]
												[T -> createTagsForResources(Map<String,String>-Map<String,String>-String-String) : MethodDecl "@Override     public void createTagsForResources(Map<String, String> keyValueMap, String... resourceIds) {         Validate.notNull(keyValueMap);         Validate.notEmpty(keyValueMap);         Validate.notNull(resourceIds);         Validate.notEmpty(resourceIds);         AmazonEC2 ec2Client = ec2Client();         List<Tag> tags = new ArrayList<Tag>();         for (Map.Entry<String, String> entry : keyValueMap.entrySet()) {             tags.add(new Tag(entry.getKey(), entry.getValue()));         }         CreateTagsRequest req = new CreateTagsRequest(Arrays.asList(resourceIds), tags);         ec2Client.createTags(req);     }" compose:Replacement merge: LineBased]
												[T -> describeImages(String-String) : MethodDecl "public List<Image> describeImages(String... imageIds) {         if (imageIds == null || imageIds.length == 0) {             LOGGER.info(String.format("Getting all AMIs in region %s.", region));         } else {             LOGGER.info(String.format("Getting AMIs for %d ids in region %s.", imageIds.length, region));         }          AmazonEC2 ec2Client = ec2Client();         DescribeImagesRequest request = new DescribeImagesRequest();         if (imageIds != null) {             request.setImageIds(Arrays.asList(imageIds));         }         DescribeImagesResult result = ec2Client.describeImages(request);         List<Image> images = result.getImages();          LOGGER.info(String.format("Got %d AMIs in region %s.", images.size(), region));         return images;     }" compose:Replacement merge: LineBased]
												[T -> describeSecurityGroups(String-String) : MethodDecl "public List<SecurityGroup> describeSecurityGroups(String... groupNames) {         AmazonEC2 ec2Client = ec2Client();         DescribeSecurityGroupsRequest request = new DescribeSecurityGroupsRequest();          if (groupNames == null || groupNames.length == 0) {             LOGGER.info(String.format("Getting all EC2 security groups in region %s.", region));             request.withGroupNames(groupNames);         } else {             LOGGER.info(String.format("Getting EC2 security groups for %d names in region %s.", groupNames.length,                     region));         }          DescribeSecurityGroupsResult result = ec2Client.describeSecurityGroups(request);          List<SecurityGroup> securityGroups = result.getSecurityGroups();         LOGGER.info(String.format("Got %d EC2 security groups in region %s.", securityGroups.size(), region));         return securityGroups;     }" compose:Replacement merge: LineBased]
												[T -> createSecurityGroup(String-String-String-String) : MethodDecl "public String createSecurityGroup(String name, String description) {         AmazonEC2 ec2Client = ec2Client();         CreateSecurityGroupRequest request = new CreateSecurityGroupRequest();         request.setGroupName(name);         request.setDescription(description);          LOGGER.info(String.format("Creating EC2 security group %s.", name));          CreateSecurityGroupResult result = ec2Client.createSecurityGroup(request);         return result.getGroupId();     }" compose:Replacement merge: LineBased]
[NT -> left : Feature]
	[NT -> src : Folder]
		[NT -> main : Folder]
			[NT -> java : Folder]
				[NT -> com : Folder]
					[NT -> netflix : Folder]
						[NT -> simianarmy : Folder]
							[NT -> client : Folder]
								[NT -> aws : Folder]
									[NT -> AWSClient.java.merge : .java.merge-File]
										[T -> AWSClient.java : .java-Content "/*  *  *  Copyright 2012 Netflix, Inc.  *  *     Licensed under the Apache License, Version 2.0 (the "License");  *     you may not use this file except in compliance with the License.  *     You may obtain a copy of the License at  *  *         http://www.apache.org/licenses/LICENSE-2.0  *  *     Unless required by applicable law or agreed to in writing, software  *     distributed under the License is distributed on an "AS IS" BASIS,  *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *     See the License for the specific language governing permissions and  *     limitations under the License.  *  */ package com.netflix.simianarmy.client.aws;  import com.amazonaws.AmazonServiceException; import com.amazonaws.auth.AWSCredentialsProvider; import com.amazonaws.services.autoscaling.AmazonAutoScalingClient; import com.amazonaws.services.autoscaling.model.AutoScalingGroup; import com.amazonaws.services.autoscaling.model.AutoScalingInstanceDetails; import com.amazonaws.services.autoscaling.model.DeleteAutoScalingGroupRequest; import com.amazonaws.services.autoscaling.model.DeleteLaunchConfigurationRequest; import com.amazonaws.services.autoscaling.model.DescribeAutoScalingGroupsRequest; import com.amazonaws.services.autoscaling.model.DescribeAutoScalingGroupsResult; import com.amazonaws.services.autoscaling.model.DescribeAutoScalingInstancesRequest; import com.amazonaws.services.autoscaling.model.DescribeAutoScalingInstancesResult; import com.amazonaws.services.autoscaling.model.DescribeLaunchConfigurationsRequest; import com.amazonaws.services.autoscaling.model.DescribeLaunchConfigurationsResult; import com.amazonaws.services.autoscaling.model.LaunchConfiguration; import com.amazonaws.services.ec2.AmazonEC2; import com.amazonaws.services.ec2.AmazonEC2Client; import com.amazonaws.services.ec2.model.CreateTagsRequest; import com.amazonaws.services.ec2.model.DeleteSnapshotRequest; import com.amazonaws.services.ec2.model.DeleteVolumeRequest; import com.amazonaws.services.ec2.model.DeregisterImageRequest; import com.amazonaws.services.ec2.model.DescribeImagesRequest; import com.amazonaws.services.ec2.model.DescribeImagesResult; import com.amazonaws.services.ec2.model.DescribeInstancesRequest; import com.amazonaws.services.ec2.model.DescribeInstancesResult; import com.amazonaws.services.ec2.model.DescribeSnapshotsRequest; import com.amazonaws.services.ec2.model.DescribeSnapshotsResult; import com.amazonaws.services.ec2.model.DescribeVolumesRequest; import com.amazonaws.services.ec2.model.DescribeVolumesResult; import com.amazonaws.services.ec2.model.DetachVolumeRequest; import com.amazonaws.services.ec2.model.EbsInstanceBlockDevice; import com.amazonaws.services.ec2.model.Image; import com.amazonaws.services.ec2.model.Instance; import com.amazonaws.services.ec2.model.InstanceBlockDeviceMapping; import com.amazonaws.services.ec2.model.ModifyInstanceAttributeRequest; import com.amazonaws.services.ec2.model.Reservation; import com.amazonaws.services.ec2.model.Snapshot; import com.amazonaws.services.ec2.model.Tag; import com.amazonaws.services.ec2.model.TerminateInstancesRequest; import com.amazonaws.services.ec2.model.Volume; import com.amazonaws.services.elasticloadbalancing.AmazonElasticLoadBalancingClient; import com.amazonaws.services.elasticloadbalancing.model.DescribeLoadBalancersRequest; import com.amazonaws.services.elasticloadbalancing.model.DescribeLoadBalancersResult; import com.amazonaws.services.elasticloadbalancing.model.LoadBalancerDescription; import com.amazonaws.services.simpledb.AmazonSimpleDB; import com.amazonaws.services.simpledb.AmazonSimpleDBClient; import com.google.common.base.Strings; import com.netflix.simianarmy.CloudClient; import com.netflix.simianarmy.NotFoundException;  import org.apache.commons.lang.Validate; import org.slf4j.Logger; import org.slf4j.LoggerFactory;  import java.util.ArrayList; import java.util.Arrays; import java.util.LinkedList; import java.util.List; import java.util.Map;   /**  * The Class AWSClient. Simple Amazon EC2 and Amazon ASG client interface.  */ public class AWSClient implements CloudClient {      /** The Constant LOGGER. */     private static final Logger LOGGER = LoggerFactory.getLogger(AWSClient.class);      /** The region. */     private final String region;      private final AWSCredentialsProvider awsCredentialsProvider;      /**      * This constructor will let the AWS SDK obtain the credentials, which will      * choose such in the following order:      *      * <ul>      * <li>Environment Variables: {@code AWS_ACCESS_KEY_ID} and      * {@code AWS_SECRET_KEY}</li>      * <li>Java System Properties: {@code aws.accessKeyId} and      * {@code aws.secretKey}</li>      * <li>Instance Metadata Service, which provides the credentials associated      * with the IAM role for the EC2 instance</li>      * </ul>      *      * <p>      * If credentials are provided explicitly, use      * {@link com.netflix.simianarmy.basic.BasicSimianArmyContext#exportCredentials(String, String)}      * which will set them as System properties used by each AWS SDK call.      * </p>      *      * <p>      * <b>Note:</b> Avoid storing credentials received dynamically via the      * {@link com.amazonaws.auth.InstanceProfileCredentialsProvider} as these will be rotated and      * their renewal is handled by its      * {@link com.amazonaws.auth.InstanceProfileCredentialsProvider#getCredentials()} method.      * </p>      *      * @param region      *            the region      * @see com.amazonaws.auth.DefaultAWSCredentialsProviderChain      * @see com.amazonaws.auth.InstanceProfileCredentialsProvider      * @see com.netflix.simianarmy.basic.BasicSimianArmyContext#exportCredentials(String, String)      */     public AWSClient(String region) {         this.region = region;         this.awsCredentialsProvider = null;     }      /**      * The constructor allows you to provide your own AWS credentials provider.      * @param region      *          the region      * @param awsCredentialsProvider      *          the AWS credentials provider      */     public AWSClient(String region, AWSCredentialsProvider awsCredentialsProvider) {         this.region = region;         this.awsCredentialsProvider = awsCredentialsProvider;     }      /**      * The Region.      *      * @return the region the client is configured to communicate with      */     public String region() {         return region;     }      /**      * Amazon EC2 client. Abstracted to aid testing.      *      * @return the Amazon EC2 client      */     protected AmazonEC2 ec2Client() {         AmazonEC2 client;         if (awsCredentialsProvider == null) {             client = new AmazonEC2Client();         } else {             client = new AmazonEC2Client(awsCredentialsProvider);         }         client.setEndpoint("ec2." + region + ".amazonaws.com");         return client;     }      /**      * Amazon ASG client. Abstracted to aid testing.      *      * @return the Amazon Auto Scaling client      */     protected AmazonAutoScalingClient asgClient() {         AmazonAutoScalingClient client;         if (awsCredentialsProvider == null) {             client = new AmazonAutoScalingClient();         } else {             client = new AmazonAutoScalingClient(awsCredentialsProvider);         }         client.setEndpoint("autoscaling." + region + ".amazonaws.com");         return client;     }      /**      * Amazon ELB client. Abstracted to aid testing.      *      * @return the Amazon ELB client      */     protected AmazonElasticLoadBalancingClient elbClient() {         AmazonElasticLoadBalancingClient client;         if (awsCredentialsProvider == null) {             client = new AmazonElasticLoadBalancingClient();         } else {             client = new AmazonElasticLoadBalancingClient(awsCredentialsProvider);         }         client.setEndpoint("elasticloadbalancing." + region + ".amazonaws.com");         return client;     }      /**      * Amazon SimpleDB client.      *      * @return the Amazon SimpleDB client      */     public AmazonSimpleDB sdbClient() {         AmazonSimpleDB client;         if (awsCredentialsProvider == null) {             client = new AmazonSimpleDBClient();         } else {             client = new AmazonSimpleDBClient(awsCredentialsProvider);         }         // us-east-1 has special naming         // http://docs.amazonwebservices.com/general/latest/gr/rande.html#sdb_region         if (region == null || region.equals("us-east-1")) {             client.setEndpoint("sdb.amazonaws.com");         } else {             client.setEndpoint("sdb." + region + ".amazonaws.com");         }         return client;     }      /**      * Describe auto scaling groups.      *      * @return the list      */     public List<AutoScalingGroup> describeAutoScalingGroups() {         return describeAutoScalingGroups((String[]) null);     }      /**      * Describe a set of specific auto scaling groups.      *      * @param names the ASG names      * @return the auto scaling groups      */     public List<AutoScalingGroup> describeAutoScalingGroups(String... names) {         if (names == null || names.length == 0) {             LOGGER.info(String.format("Getting all auto-scaling groups in region %s.", region));         } else {             LOGGER.info(String.format("Getting auto-scaling groups for %d names in region %s.", names.length, region));         }          List<AutoScalingGroup> asgs = new LinkedList<AutoScalingGroup>();          AmazonAutoScalingClient asgClient = asgClient();         DescribeAutoScalingGroupsRequest request = new DescribeAutoScalingGroupsRequest();         if (names != null) {             request.setAutoScalingGroupNames(Arrays.asList(names));         }         DescribeAutoScalingGroupsResult result = asgClient.describeAutoScalingGroups(request);          asgs.addAll(result.getAutoScalingGroups());         while (result.getNextToken() != null) {             request.setNextToken(result.getNextToken());             result = asgClient.describeAutoScalingGroups(request);             asgs.addAll(result.getAutoScalingGroups());         }          LOGGER.info(String.format("Got %d auto-scaling groups in region %s.", asgs.size(), region));         return asgs;     }      /**      * Describe a set of specific ELBs.      *      * @param names the ELB names      * @return the ELBs      */     public List<LoadBalancerDescription> describeElasticLoadBalancers(String... names) {         if (names == null || names.length == 0) {             LOGGER.info(String.format("Getting all ELBs in region %s.", region));         } else {             LOGGER.info(String.format("Getting ELBs for %d names in region %s.", names.length, region));         }          AmazonElasticLoadBalancingClient elbClient = elbClient();         DescribeLoadBalancersRequest request = new DescribeLoadBalancersRequest().withLoadBalancerNames(names);         DescribeLoadBalancersResult result = elbClient.describeLoadBalancers(request);         List<LoadBalancerDescription> elbs = result.getLoadBalancerDescriptions();         LOGGER.info(String.format("Got %d ELBs in region %s.", elbs.size(), region));         return elbs;     }       /**      * Describe a set of specific auto-scaling instances.      *      * @param instanceIds the instance ids      * @return the instances      */     public List<AutoScalingInstanceDetails> describeAutoScalingInstances(String... instanceIds) {         if (instanceIds == null || instanceIds.length == 0) {             LOGGER.info(String.format("Getting all auto-scaling instances in region %s.", region));         } else {             LOGGER.info(String.format("Getting auto-scaling instances for %d ids in region %s.",                     instanceIds.length, region));         }          List<AutoScalingInstanceDetails> instances = new LinkedList<AutoScalingInstanceDetails>();          AmazonAutoScalingClient asgClient = asgClient();         DescribeAutoScalingInstancesRequest request = new DescribeAutoScalingInstancesRequest();         if (instanceIds != null) {             request.setInstanceIds(Arrays.asList(instanceIds));         }         DescribeAutoScalingInstancesResult result = asgClient.describeAutoScalingInstances(request);          instances.addAll(result.getAutoScalingInstances());         while (result.getNextToken() != null) {             request = request.withNextToken(result.getNextToken());             result = asgClient.describeAutoScalingInstances(request);             instances.addAll(result.getAutoScalingInstances());         }          LOGGER.info(String.format("Got %d auto-scaling instances.", instances.size()));         return instances;     }      /**      * Describe a set of specific instances.      *      * @param instanceIds the instance ids      * @return the instances      */     public List<Instance> describeInstances(String... instanceIds) {         if (instanceIds == null || instanceIds.length == 0) {             LOGGER.info(String.format("Getting all EC2 instances in region %s.", region));         } else {             LOGGER.info(String.format("Getting EC2 instances for %d ids in region %s.", instanceIds.length, region));         }          List<Instance> instances = new LinkedList<Instance>();          AmazonEC2 ec2Client = ec2Client();         DescribeInstancesRequest request = new DescribeInstancesRequest();         if (instanceIds != null) {             request.withInstanceIds(Arrays.asList(instanceIds));         }         DescribeInstancesResult result = ec2Client.describeInstances(request);         for (Reservation reservation : result.getReservations()) {             instances.addAll(reservation.getInstances());         }          LOGGER.info(String.format("Got %d EC2 instances in region %s.", instances.size(), region));         return instances;     }      /**      * Describe a set of specific launch configurations.      *      * @param names the launch configuration names      * @return the launch configurations      */     public List<LaunchConfiguration> describeLaunchConfigurations(String... names) {         if (names == null || names.length == 0) {             LOGGER.info(String.format("Getting all launch configurations in region %s.", region));         } else {             LOGGER.info(String.format("Getting launch configurations for %d names in region %s.",                     names.length, region));         }          List<LaunchConfiguration> lcs = new LinkedList<LaunchConfiguration>();          AmazonAutoScalingClient asgClient = asgClient();         DescribeLaunchConfigurationsRequest request = new DescribeLaunchConfigurationsRequest()         .withLaunchConfigurationNames(names);         DescribeLaunchConfigurationsResult result = asgClient.describeLaunchConfigurations(request);          lcs.addAll(result.getLaunchConfigurations());         while (result.getNextToken() != null) {             request.setNextToken(result.getNextToken());             result = asgClient.describeLaunchConfigurations(request);             lcs.addAll(result.getLaunchConfigurations());         }          LOGGER.info(String.format("Got %d launch configurations in region %s.", lcs.size(), region));         return lcs;     }      /** {@inheritDoc} */     @Override     public void deleteAutoScalingGroup(String asgName) {         Validate.notEmpty(asgName);         LOGGER.info(String.format("Deleting auto-scaling group with name %s in region %s.", asgName, region));         AmazonAutoScalingClient asgClient = asgClient();         DeleteAutoScalingGroupRequest request = new DeleteAutoScalingGroupRequest()         .withAutoScalingGroupName(asgName);         asgClient.deleteAutoScalingGroup(request);     }      /** {@inheritDoc} */     @Override     public void deleteLaunchConfiguration(String launchConfigName) {         Validate.notEmpty(launchConfigName);         LOGGER.info(String.format("Deleting launch configuration with name %s in region %s.",                 launchConfigName, region));         AmazonAutoScalingClient asgClient = asgClient();         DeleteLaunchConfigurationRequest request = new DeleteLaunchConfigurationRequest()                 .withLaunchConfigurationName(launchConfigName);         asgClient.deleteLaunchConfiguration(request);     }      /** {@inheritDoc} */     @Override     public void deleteImage(String imageId) {         Validate.notEmpty(imageId);         LOGGER.info(String.format("Deleting image %s in region %s.",                 imageId, region));         AmazonEC2 ec2Client = ec2Client();         DeregisterImageRequest request = new DeregisterImageRequest(imageId);         ec2Client.deregisterImage(request);     }      /** {@inheritDoc} */     @Override     public void deleteVolume(String volumeId) {         Validate.notEmpty(volumeId);         LOGGER.info(String.format("Deleting volume %s in region %s.", volumeId, region));         AmazonEC2 ec2Client = ec2Client();         DeleteVolumeRequest request = new DeleteVolumeRequest().withVolumeId(volumeId);         ec2Client.deleteVolume(request);     }      /** {@inheritDoc} */     @Override     public void deleteSnapshot(String snapshotId) {         Validate.notEmpty(snapshotId);         LOGGER.info(String.format("Deleting snapshot %s in region %s.", snapshotId, region));         AmazonEC2 ec2Client = ec2Client();         DeleteSnapshotRequest request = new DeleteSnapshotRequest().withSnapshotId(snapshotId);         ec2Client.deleteSnapshot(request);     }      /** {@inheritDoc} */     @Override     public void terminateInstance(String instanceId) {         Validate.notEmpty(instanceId);         LOGGER.info(String.format("Terminating instance %s in region %s.", instanceId, region));         try {             ec2Client().terminateInstances(new TerminateInstancesRequest(Arrays.asList(instanceId)));         } catch (AmazonServiceException e) {             if (e.getErrorCode().equals("InvalidInstanceID.NotFound")) {                 throw new NotFoundException("AWS instance " + instanceId + " not found", e);             }             throw e;         }     }      /** {@inheritDoc} */     @Override     public void setSecurityGroups(String instanceId, List<String> groups) {         Validate.notEmpty(instanceId);         LOGGER.info(String.format("Removing all security groups from instance %s in region %s.", instanceId, region));         try {             ModifyInstanceAttributeRequest request = new ModifyInstanceAttributeRequest();             request.setInstanceId(instanceId);             request.setGroups(groups);             ec2Client().modifyInstanceAttribute(request);         } catch (AmazonServiceException e) {             if (e.getErrorCode().equals("InvalidInstanceID.NotFound")) {                 throw new NotFoundException("AWS instance " + instanceId + " not found", e);             }             throw e;         }     }      /**      * Describe a set of specific EBS volumes.      *      * @param volumeIds the volume ids      * @return the volumes      */     public List<Volume> describeVolumes(String... volumeIds) {         if (volumeIds == null || volumeIds.length == 0) {             LOGGER.info(String.format("Getting all EBS volumes in region %s.", region));         } else {             LOGGER.info(String.format("Getting EBS volumes for %d ids in region %s.", volumeIds.length, region));         }          AmazonEC2 ec2Client = ec2Client();         DescribeVolumesRequest request = new DescribeVolumesRequest();         if (volumeIds != null) {             request.setVolumeIds(Arrays.asList(volumeIds));         }         DescribeVolumesResult result = ec2Client.describeVolumes(request);         List<Volume> volumes = result.getVolumes();          LOGGER.info(String.format("Got %d EBS volumes in region %s.", volumes.size(), region));         return volumes;     }      /**      * Describe a set of specific EBS snapshots.      *      * @param snapshotIds the snapshot ids      * @return the snapshots      */     public List<Snapshot> describeSnapshots(String... snapshotIds) {         if (snapshotIds == null || snapshotIds.length == 0) {             LOGGER.info(String.format("Getting all EBS snapshots in region %s.", region));         } else {             LOGGER.info(String.format("Getting EBS snapshotIds for %d ids in region %s.", snapshotIds.length, region));         }          AmazonEC2 ec2Client = ec2Client();         DescribeSnapshotsRequest request = new DescribeSnapshotsRequest();         // Set the owner id to self to avoid getting snapshots from other accounts.         request.withOwnerIds(Arrays.<String>asList("self"));         if (snapshotIds != null) {             request.setSnapshotIds(Arrays.asList(snapshotIds));         }         DescribeSnapshotsResult result = ec2Client.describeSnapshots(request);         List<Snapshot> snapshots = result.getSnapshots();          LOGGER.info(String.format("Got %d EBS snapshots in region %s.", snapshots.size(), region));         return snapshots;     }      @Override     public void createTagsForResources(Map<String, String> keyValueMap, String... resourceIds) {         Validate.notNull(keyValueMap);         Validate.notEmpty(keyValueMap);         Validate.notNull(resourceIds);         Validate.notEmpty(resourceIds);         AmazonEC2 ec2Client = ec2Client();         List<Tag> tags = new ArrayList<Tag>();         for (Map.Entry<String, String> entry : keyValueMap.entrySet()) {             tags.add(new Tag(entry.getKey(), entry.getValue()));         }         CreateTagsRequest req = new CreateTagsRequest(Arrays.asList(resourceIds), tags);         ec2Client.createTags(req);     }      /**      * Describe a set of specific images.      *      * @param imageIds the image ids      * @return the images      */     public List<Image> describeImages(String... imageIds) {         if (imageIds == null || imageIds.length == 0) {             LOGGER.info(String.format("Getting all AMIs in region %s.", region));         } else {             LOGGER.info(String.format("Getting AMIs for %d ids in region %s.", imageIds.length, region));         }          AmazonEC2 ec2Client = ec2Client();         DescribeImagesRequest request = new DescribeImagesRequest();         if (imageIds != null) {             request.setImageIds(Arrays.asList(imageIds));         }         DescribeImagesResult result = ec2Client.describeImages(request);         List<Image> images = result.getImages();          LOGGER.info(String.format("Got %d AMIs in region %s.", images.size(), region));         return images;     }       @Override     public void detachVolume(String instanceId, String volumeId, boolean force) {         Validate.notEmpty(instanceId);         LOGGER.info(String.format("Detach volumes from instance %s in region %s.", instanceId, region));         try {             DetachVolumeRequest detachVolumeRequest = new DetachVolumeRequest();             detachVolumeRequest.setForce(force);             detachVolumeRequest.setInstanceId(instanceId);             detachVolumeRequest.setVolumeId(volumeId);             ec2Client().detachVolume(detachVolumeRequest);         } catch (AmazonServiceException e) {             if (e.getErrorCode().equals("InvalidInstanceID.NotFound")) {                 throw new NotFoundException("AWS instance " + instanceId + " not found", e);             }             throw e;         }     }      @Override     public List<String> listAttachedVolumes(String instanceId, boolean includeRoot) {         Validate.notEmpty(instanceId);         LOGGER.info(String.format("Listing volumes attached to instance %s in region %s.", instanceId, region));         try {             List<String> volumeIds = new ArrayList<String>();             for (Instance instance : describeInstances(instanceId)) {                 String rootDeviceName = instance.getRootDeviceName();                  for (InstanceBlockDeviceMapping ibdm : instance.getBlockDeviceMappings()) {                     EbsInstanceBlockDevice ebs = ibdm.getEbs();                     if (ebs == null) {                         continue;                     }                      String volumeId = ebs.getVolumeId();                     if (Strings.isNullOrEmpty(volumeId)) {                         continue;                     }                      if (!includeRoot && rootDeviceName != null) {                         if (rootDeviceName.equals(ibdm.getDeviceName())) {                             continue;                         }                     }                      volumeIds.add(volumeId);                 }             }             return volumeIds;         } catch (AmazonServiceException e) {             if (e.getErrorCode().equals("InvalidInstanceID.NotFound")) {                 throw new NotFoundException("AWS instance " + instanceId + " not found", e);             }             throw e;         }     } } " compose:StringConcatenation merge: LineBased]
[NT -> base : Feature]
	[NT -> src : Folder]
		[NT -> main : Folder]
			[NT -> java : Folder]
				[NT -> com : Folder]
					[NT -> netflix : Folder]
						[NT -> simianarmy : Folder]
							[NT -> client : Folder]
								[NT -> aws : Folder]
									[NT -> AWSClient.java.merge : .java.merge-File]
										[T -> AWSClient.java : .java-Content "/*  *  *  Copyright 2012 Netflix, Inc.  *  *     Licensed under the Apache License, Version 2.0 (the "License");  *     you may not use this file except in compliance with the License.  *     You may obtain a copy of the License at  *  *         http://www.apache.org/licenses/LICENSE-2.0  *  *     Unless required by applicable law or agreed to in writing, software  *     distributed under the License is distributed on an "AS IS" BASIS,  *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *     See the License for the specific language governing permissions and  *     limitations under the License.  *  */ package com.netflix.simianarmy.client.aws;  import com.amazonaws.AmazonServiceException; import com.amazonaws.auth.AWSCredentialsProvider; import com.amazonaws.services.autoscaling.AmazonAutoScalingClient; import com.amazonaws.services.autoscaling.model.AutoScalingGroup; import com.amazonaws.services.autoscaling.model.AutoScalingInstanceDetails; import com.amazonaws.services.autoscaling.model.DeleteAutoScalingGroupRequest; import com.amazonaws.services.autoscaling.model.DeleteLaunchConfigurationRequest; import com.amazonaws.services.autoscaling.model.DescribeAutoScalingGroupsRequest; import com.amazonaws.services.autoscaling.model.DescribeAutoScalingGroupsResult; import com.amazonaws.services.autoscaling.model.DescribeAutoScalingInstancesRequest; import com.amazonaws.services.autoscaling.model.DescribeAutoScalingInstancesResult; import com.amazonaws.services.autoscaling.model.DescribeLaunchConfigurationsRequest; import com.amazonaws.services.autoscaling.model.DescribeLaunchConfigurationsResult; import com.amazonaws.services.autoscaling.model.LaunchConfiguration; import com.amazonaws.services.ec2.AmazonEC2; import com.amazonaws.services.ec2.AmazonEC2Client; import com.amazonaws.services.ec2.model.CreateTagsRequest; import com.amazonaws.services.ec2.model.DeleteSnapshotRequest; import com.amazonaws.services.ec2.model.DeleteVolumeRequest; import com.amazonaws.services.ec2.model.DeregisterImageRequest; import com.amazonaws.services.ec2.model.DescribeImagesRequest; import com.amazonaws.services.ec2.model.DescribeImagesResult; import com.amazonaws.services.ec2.model.DescribeInstancesRequest; import com.amazonaws.services.ec2.model.DescribeInstancesResult; import com.amazonaws.services.ec2.model.DescribeSnapshotsRequest; import com.amazonaws.services.ec2.model.DescribeSnapshotsResult; import com.amazonaws.services.ec2.model.DescribeVolumesRequest; import com.amazonaws.services.ec2.model.DescribeVolumesResult; import com.amazonaws.services.ec2.model.Image; import com.amazonaws.services.ec2.model.Instance; import com.amazonaws.services.ec2.model.ModifyInstanceAttributeRequest; import com.amazonaws.services.ec2.model.Reservation; import com.amazonaws.services.ec2.model.Snapshot; import com.amazonaws.services.ec2.model.Tag; import com.amazonaws.services.ec2.model.TerminateInstancesRequest; import com.amazonaws.services.ec2.model.Volume; import com.amazonaws.services.elasticloadbalancing.AmazonElasticLoadBalancingClient; import com.amazonaws.services.elasticloadbalancing.model.DescribeLoadBalancersRequest; import com.amazonaws.services.elasticloadbalancing.model.DescribeLoadBalancersResult; import com.amazonaws.services.elasticloadbalancing.model.LoadBalancerDescription; import com.amazonaws.services.simpledb.AmazonSimpleDB; import com.amazonaws.services.simpledb.AmazonSimpleDBClient; import com.netflix.simianarmy.CloudClient; import com.netflix.simianarmy.NotFoundException;  import org.apache.commons.lang.Validate; import org.slf4j.Logger; import org.slf4j.LoggerFactory;  import java.util.ArrayList; import java.util.Arrays; import java.util.LinkedList; import java.util.List; import java.util.Map;   /**  * The Class AWSClient. Simple Amazon EC2 and Amazon ASG client interface.  */ public class AWSClient implements CloudClient {      /** The Constant LOGGER. */     private static final Logger LOGGER = LoggerFactory.getLogger(AWSClient.class);      /** The region. */     private final String region;      private final AWSCredentialsProvider awsCredentialsProvider;      /**      * This constructor will let the AWS SDK obtain the credentials, which will      * choose such in the following order:      *      * <ul>      * <li>Environment Variables: {@code AWS_ACCESS_KEY_ID} and      * {@code AWS_SECRET_KEY}</li>      * <li>Java System Properties: {@code aws.accessKeyId} and      * {@code aws.secretKey}</li>      * <li>Instance Metadata Service, which provides the credentials associated      * with the IAM role for the EC2 instance</li>      * </ul>      *      * <p>      * If credentials are provided explicitly, use      * {@link com.netflix.simianarmy.basic.BasicSimianArmyContext#exportCredentials(String, String)}      * which will set them as System properties used by each AWS SDK call.      * </p>      *      * <p>      * <b>Note:</b> Avoid storing credentials received dynamically via the      * {@link com.amazonaws.auth.InstanceProfileCredentialsProvider} as these will be rotated and      * their renewal is handled by its      * {@link com.amazonaws.auth.InstanceProfileCredentialsProvider#getCredentials()} method.      * </p>      *      * @param region      *            the region      * @see com.amazonaws.auth.DefaultAWSCredentialsProviderChain      * @see com.amazonaws.auth.InstanceProfileCredentialsProvider      * @see com.netflix.simianarmy.basic.BasicSimianArmyContext#exportCredentials(String, String)      */     public AWSClient(String region) {         this.region = region;         this.awsCredentialsProvider = null;     }      /**      * The constructor allows you to provide your own AWS credentials provider.      * @param region      *          the region      * @param awsCredentialsProvider      *          the AWS credentials provider      */     public AWSClient(String region, AWSCredentialsProvider awsCredentialsProvider) {         this.region = region;         this.awsCredentialsProvider = awsCredentialsProvider;     }      /**      * The Region.      *      * @return the region the client is configured to communicate with      */     public String region() {         return region;     }      /**      * Amazon EC2 client. Abstracted to aid testing.      *      * @return the Amazon EC2 client      */     protected AmazonEC2 ec2Client() {         AmazonEC2 client;         if (awsCredentialsProvider == null) {             client = new AmazonEC2Client();         } else {             client = new AmazonEC2Client(awsCredentialsProvider);         }         client.setEndpoint("ec2." + region + ".amazonaws.com");         return client;     }      /**      * Amazon ASG client. Abstracted to aid testing.      *      * @return the Amazon Auto Scaling client      */     protected AmazonAutoScalingClient asgClient() {         AmazonAutoScalingClient client;         if (awsCredentialsProvider == null) {             client = new AmazonAutoScalingClient();         } else {             client = new AmazonAutoScalingClient(awsCredentialsProvider);         }         client.setEndpoint("autoscaling." + region + ".amazonaws.com");         return client;     }      /**      * Amazon ELB client. Abstracted to aid testing.      *      * @return the Amazon ELB client      */     protected AmazonElasticLoadBalancingClient elbClient() {         AmazonElasticLoadBalancingClient client;         if (awsCredentialsProvider == null) {             client = new AmazonElasticLoadBalancingClient();         } else {             client = new AmazonElasticLoadBalancingClient(awsCredentialsProvider);         }         client.setEndpoint("elasticloadbalancing." + region + ".amazonaws.com");         return client;     }      /**      * Amazon SimpleDB client.      *      * @return the Amazon SimpleDB client      */     public AmazonSimpleDB sdbClient() {         AmazonSimpleDB client;         if (awsCredentialsProvider == null) {             client = new AmazonSimpleDBClient();         } else {             client = new AmazonSimpleDBClient(awsCredentialsProvider);         }         // us-east-1 has special naming         // http://docs.amazonwebservices.com/general/latest/gr/rande.html#sdb_region         if (region == null || region.equals("us-east-1")) {             client.setEndpoint("sdb.amazonaws.com");         } else {             client.setEndpoint("sdb." + region + ".amazonaws.com");         }         return client;     }      /**      * Describe auto scaling groups.      *      * @return the list      */     public List<AutoScalingGroup> describeAutoScalingGroups() {         return describeAutoScalingGroups((String[]) null);     }      /**      * Describe a set of specific auto scaling groups.      *      * @param names the ASG names      * @return the auto scaling groups      */     public List<AutoScalingGroup> describeAutoScalingGroups(String... names) {         if (names == null || names.length == 0) {             LOGGER.info(String.format("Getting all auto-scaling groups in region %s.", region));         } else {             LOGGER.info(String.format("Getting auto-scaling groups for %d names in region %s.", names.length, region));         }          List<AutoScalingGroup> asgs = new LinkedList<AutoScalingGroup>();          AmazonAutoScalingClient asgClient = asgClient();         DescribeAutoScalingGroupsRequest request = new DescribeAutoScalingGroupsRequest();         if (names != null) {             request.setAutoScalingGroupNames(Arrays.asList(names));         }         DescribeAutoScalingGroupsResult result = asgClient.describeAutoScalingGroups(request);          asgs.addAll(result.getAutoScalingGroups());         while (result.getNextToken() != null) {             request.setNextToken(result.getNextToken());             result = asgClient.describeAutoScalingGroups(request);             asgs.addAll(result.getAutoScalingGroups());         }          LOGGER.info(String.format("Got %d auto-scaling groups in region %s.", asgs.size(), region));         return asgs;     }      /**      * Describe a set of specific ELBs.      *      * @param names the ELB names      * @return the ELBs      */     public List<LoadBalancerDescription> describeElasticLoadBalancers(String... names) {         if (names == null || names.length == 0) {             LOGGER.info(String.format("Getting all ELBs in region %s.", region));         } else {             LOGGER.info(String.format("Getting ELBs for %d names in region %s.", names.length, region));         }          AmazonElasticLoadBalancingClient elbClient = elbClient();         DescribeLoadBalancersRequest request = new DescribeLoadBalancersRequest().withLoadBalancerNames(names);         DescribeLoadBalancersResult result = elbClient.describeLoadBalancers(request);         List<LoadBalancerDescription> elbs = result.getLoadBalancerDescriptions();         LOGGER.info(String.format("Got %d ELBs in region %s.", elbs.size(), region));         return elbs;     }       /**      * Describe a set of specific auto-scaling instances.      *      * @param instanceIds the instance ids      * @return the instances      */     public List<AutoScalingInstanceDetails> describeAutoScalingInstances(String... instanceIds) {         if (instanceIds == null || instanceIds.length == 0) {             LOGGER.info(String.format("Getting all auto-scaling instances in region %s.", region));         } else {             LOGGER.info(String.format("Getting auto-scaling instances for %d ids in region %s.",                     instanceIds.length, region));         }          List<AutoScalingInstanceDetails> instances = new LinkedList<AutoScalingInstanceDetails>();          AmazonAutoScalingClient asgClient = asgClient();         DescribeAutoScalingInstancesRequest request = new DescribeAutoScalingInstancesRequest();         if (instanceIds != null) {             request.setInstanceIds(Arrays.asList(instanceIds));         }         DescribeAutoScalingInstancesResult result = asgClient.describeAutoScalingInstances(request);          instances.addAll(result.getAutoScalingInstances());         while (result.getNextToken() != null) {             request = request.withNextToken(result.getNextToken());             result = asgClient.describeAutoScalingInstances(request);             instances.addAll(result.getAutoScalingInstances());         }          LOGGER.info(String.format("Got %d auto-scaling instances.", instances.size()));         return instances;     }      /**      * Describe a set of specific instances.      *      * @param instanceIds the instance ids      * @return the instances      */     public List<Instance> describeInstances(String... instanceIds) {         if (instanceIds == null || instanceIds.length == 0) {             LOGGER.info(String.format("Getting all EC2 instances in region %s.", region));         } else {             LOGGER.info(String.format("Getting EC2 instances for %d ids in region %s.", instanceIds.length, region));         }          List<Instance> instances = new LinkedList<Instance>();          AmazonEC2 ec2Client = ec2Client();         DescribeInstancesRequest request = new DescribeInstancesRequest();         if (instanceIds != null) {             request.withInstanceIds(Arrays.asList(instanceIds));         }         DescribeInstancesResult result = ec2Client.describeInstances(request);         for (Reservation reservation : result.getReservations()) {             instances.addAll(reservation.getInstances());         }          LOGGER.info(String.format("Got %d EC2 instances in region %s.", instances.size(), region));         return instances;     }      /**      * Describe a set of specific launch configurations.      *      * @param names the launch configuration names      * @return the launch configurations      */     public List<LaunchConfiguration> describeLaunchConfigurations(String... names) {         if (names == null || names.length == 0) {             LOGGER.info(String.format("Getting all launch configurations in region %s.", region));         } else {             LOGGER.info(String.format("Getting launch configurations for %d names in region %s.",                     names.length, region));         }          List<LaunchConfiguration> lcs = new LinkedList<LaunchConfiguration>();          AmazonAutoScalingClient asgClient = asgClient();         DescribeLaunchConfigurationsRequest request = new DescribeLaunchConfigurationsRequest()         .withLaunchConfigurationNames(names);         DescribeLaunchConfigurationsResult result = asgClient.describeLaunchConfigurations(request);          lcs.addAll(result.getLaunchConfigurations());         while (result.getNextToken() != null) {             request.setNextToken(result.getNextToken());             result = asgClient.describeLaunchConfigurations(request);             lcs.addAll(result.getLaunchConfigurations());         }          LOGGER.info(String.format("Got %d launch configurations in region %s.", lcs.size(), region));         return lcs;     }      /** {@inheritDoc} */     @Override     public void deleteAutoScalingGroup(String asgName) {         Validate.notEmpty(asgName);         LOGGER.info(String.format("Deleting auto-scaling group with name %s in region %s.", asgName, region));         AmazonAutoScalingClient asgClient = asgClient();         DeleteAutoScalingGroupRequest request = new DeleteAutoScalingGroupRequest()         .withAutoScalingGroupName(asgName);         asgClient.deleteAutoScalingGroup(request);     }      /** {@inheritDoc} */     @Override     public void deleteLaunchConfiguration(String launchConfigName) {         Validate.notEmpty(launchConfigName);         LOGGER.info(String.format("Deleting launch configuration with name %s in region %s.",                 launchConfigName, region));         AmazonAutoScalingClient asgClient = asgClient();         DeleteLaunchConfigurationRequest request = new DeleteLaunchConfigurationRequest()                 .withLaunchConfigurationName(launchConfigName);         asgClient.deleteLaunchConfiguration(request);     }      /** {@inheritDoc} */     @Override     public void deleteImage(String imageId) {         Validate.notEmpty(imageId);         LOGGER.info(String.format("Deleting image %s in region %s.",                 imageId, region));         AmazonEC2 ec2Client = ec2Client();         DeregisterImageRequest request = new DeregisterImageRequest(imageId);         ec2Client.deregisterImage(request);     }      /** {@inheritDoc} */     @Override     public void deleteVolume(String volumeId) {         Validate.notEmpty(volumeId);         LOGGER.info(String.format("Deleting volume %s in region %s.", volumeId, region));         AmazonEC2 ec2Client = ec2Client();         DeleteVolumeRequest request = new DeleteVolumeRequest().withVolumeId(volumeId);         ec2Client.deleteVolume(request);     }      /** {@inheritDoc} */     @Override     public void deleteSnapshot(String snapshotId) {         Validate.notEmpty(snapshotId);         LOGGER.info(String.format("Deleting snapshot %s in region %s.", snapshotId, region));         AmazonEC2 ec2Client = ec2Client();         DeleteSnapshotRequest request = new DeleteSnapshotRequest().withSnapshotId(snapshotId);         ec2Client.deleteSnapshot(request);     }      /** {@inheritDoc} */     @Override     public void terminateInstance(String instanceId) {         Validate.notEmpty(instanceId);         LOGGER.info(String.format("Terminating instance %s in region %s.", instanceId, region));         try {             ec2Client().terminateInstances(new TerminateInstancesRequest(Arrays.asList(instanceId)));         } catch (AmazonServiceException e) {             if (e.getErrorCode().equals("InvalidInstanceID.NotFound")) {                 throw new NotFoundException("AWS instance " + instanceId + " not found", e);             }             throw e;         }     }      /** {@inheritDoc} */     @Override     public void setSecurityGroups(String instanceId, List<String> groups) {         Validate.notEmpty(instanceId);         LOGGER.info(String.format("Removing all security groups from instance %s in region %s.", instanceId, region));         try {             ModifyInstanceAttributeRequest request = new ModifyInstanceAttributeRequest();             request.setInstanceId(instanceId);             request.setGroups(groups);             ec2Client().modifyInstanceAttribute(request);         } catch (AmazonServiceException e) {             if (e.getErrorCode().equals("InvalidInstanceID.NotFound")) {                 throw new NotFoundException("AWS instance " + instanceId + " not found", e);             }             throw e;         }     }      /**      * Describe a set of specific EBS volumes.      *      * @param volumeIds the volume ids      * @return the volumes      */     public List<Volume> describeVolumes(String... volumeIds) {         if (volumeIds == null || volumeIds.length == 0) {             LOGGER.info(String.format("Getting all EBS volumes in region %s.", region));         } else {             LOGGER.info(String.format("Getting EBS volumes for %d ids in region %s.", volumeIds.length, region));         }          AmazonEC2 ec2Client = ec2Client();         DescribeVolumesRequest request = new DescribeVolumesRequest();         if (volumeIds != null) {             request.setVolumeIds(Arrays.asList(volumeIds));         }         DescribeVolumesResult result = ec2Client.describeVolumes(request);         List<Volume> volumes = result.getVolumes();          LOGGER.info(String.format("Got %d EBS volumes in region %s.", volumes.size(), region));         return volumes;     }      /**      * Describe a set of specific EBS snapshots.      *      * @param snapshotIds the snapshot ids      * @return the snapshots      */     public List<Snapshot> describeSnapshots(String... snapshotIds) {         if (snapshotIds == null || snapshotIds.length == 0) {             LOGGER.info(String.format("Getting all EBS snapshots in region %s.", region));         } else {             LOGGER.info(String.format("Getting EBS snapshotIds for %d ids in region %s.", snapshotIds.length, region));         }          AmazonEC2 ec2Client = ec2Client();         DescribeSnapshotsRequest request = new DescribeSnapshotsRequest();         // Set the owner id to self to avoid getting snapshots from other accounts.         request.withOwnerIds(Arrays.<String>asList("self"));         if (snapshotIds != null) {             request.setSnapshotIds(Arrays.asList(snapshotIds));         }         DescribeSnapshotsResult result = ec2Client.describeSnapshots(request);         List<Snapshot> snapshots = result.getSnapshots();          LOGGER.info(String.format("Got %d EBS snapshots in region %s.", snapshots.size(), region));         return snapshots;     }      @Override     public void createTagsForResources(Map<String, String> keyValueMap, String... resourceIds) {         Validate.notNull(keyValueMap);         Validate.notEmpty(keyValueMap);         Validate.notNull(resourceIds);         Validate.notEmpty(resourceIds);         AmazonEC2 ec2Client = ec2Client();         List<Tag> tags = new ArrayList<Tag>();         for (Map.Entry<String, String> entry : keyValueMap.entrySet()) {             tags.add(new Tag(entry.getKey(), entry.getValue()));         }         CreateTagsRequest req = new CreateTagsRequest(Arrays.asList(resourceIds), tags);         ec2Client.createTags(req);     }      /**      * Describe a set of specific images.      *      * @param imageIds the image ids      * @return the images      */     public List<Image> describeImages(String... imageIds) {         if (imageIds == null || imageIds.length == 0) {             LOGGER.info(String.format("Getting all AMIs in region %s.", region));         } else {             LOGGER.info(String.format("Getting AMIs for %d ids in region %s.", imageIds.length, region));         }          AmazonEC2 ec2Client = ec2Client();         DescribeImagesRequest request = new DescribeImagesRequest();         if (imageIds != null) {             request.setImageIds(Arrays.asList(imageIds));         }         DescribeImagesResult result = ec2Client.describeImages(request);         List<Image> images = result.getImages();          LOGGER.info(String.format("Got %d AMIs in region %s.", images.size(), region));         return images;     } } " compose:StringConcatenation merge: LineBased]
[NT -> right : Feature]
	[NT -> src : Folder]
		[NT -> main : Folder]
			[NT -> java : Folder]
				[NT -> com : Folder]
					[NT -> netflix : Folder]
						[NT -> simianarmy : Folder]
							[NT -> client : Folder]
								[NT -> aws : Folder]
									[NT -> AWSClient.java.merge : .java.merge-File]
										[T -> AWSClient.java : .java-Content "/*  *  *  Copyright 2012 Netflix, Inc.  *  *     Licensed under the Apache License, Version 2.0 (the "License");  *     you may not use this file except in compliance with the License.  *     You may obtain a copy of the License at  *  *         http://www.apache.org/licenses/LICENSE-2.0  *  *     Unless required by applicable law or agreed to in writing, software  *     distributed under the License is distributed on an "AS IS" BASIS,  *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *     See the License for the specific language governing permissions and  *     limitations under the License.  *  */ package com.netflix.simianarmy.client.aws;  import com.amazonaws.AmazonServiceException; import com.amazonaws.auth.AWSCredentialsProvider; import com.amazonaws.services.autoscaling.AmazonAutoScalingClient; import com.amazonaws.services.autoscaling.model.AutoScalingGroup; import com.amazonaws.services.autoscaling.model.AutoScalingInstanceDetails; import com.amazonaws.services.autoscaling.model.DeleteAutoScalingGroupRequest; import com.amazonaws.services.autoscaling.model.DeleteLaunchConfigurationRequest; import com.amazonaws.services.autoscaling.model.DescribeAutoScalingGroupsRequest; import com.amazonaws.services.autoscaling.model.DescribeAutoScalingGroupsResult; import com.amazonaws.services.autoscaling.model.DescribeAutoScalingInstancesRequest; import com.amazonaws.services.autoscaling.model.DescribeAutoScalingInstancesResult; import com.amazonaws.services.autoscaling.model.DescribeLaunchConfigurationsRequest; import com.amazonaws.services.autoscaling.model.DescribeLaunchConfigurationsResult; import com.amazonaws.services.autoscaling.model.LaunchConfiguration; import com.amazonaws.services.ec2.AmazonEC2; import com.amazonaws.services.ec2.AmazonEC2Client; import com.amazonaws.services.ec2.model.CreateSecurityGroupRequest; import com.amazonaws.services.ec2.model.CreateSecurityGroupResult; import com.amazonaws.services.ec2.model.CreateTagsRequest; import com.amazonaws.services.ec2.model.DeleteSnapshotRequest; import com.amazonaws.services.ec2.model.DeleteVolumeRequest; import com.amazonaws.services.ec2.model.DeregisterImageRequest; import com.amazonaws.services.ec2.model.DescribeImagesRequest; import com.amazonaws.services.ec2.model.DescribeImagesResult; import com.amazonaws.services.ec2.model.DescribeInstancesRequest; import com.amazonaws.services.ec2.model.DescribeInstancesResult; import com.amazonaws.services.ec2.model.DescribeSecurityGroupsRequest; import com.amazonaws.services.ec2.model.DescribeSecurityGroupsResult; import com.amazonaws.services.ec2.model.DescribeSnapshotsRequest; import com.amazonaws.services.ec2.model.DescribeSnapshotsResult; import com.amazonaws.services.ec2.model.DescribeVolumesRequest; import com.amazonaws.services.ec2.model.DescribeVolumesResult; import com.amazonaws.services.ec2.model.Image; import com.amazonaws.services.ec2.model.Instance; import com.amazonaws.services.ec2.model.ModifyInstanceAttributeRequest; import com.amazonaws.services.ec2.model.Reservation; import com.amazonaws.services.ec2.model.SecurityGroup; import com.amazonaws.services.ec2.model.Snapshot; import com.amazonaws.services.ec2.model.Tag; import com.amazonaws.services.ec2.model.TerminateInstancesRequest; import com.amazonaws.services.ec2.model.Volume; import com.amazonaws.services.elasticloadbalancing.AmazonElasticLoadBalancingClient; import com.amazonaws.services.elasticloadbalancing.model.DescribeLoadBalancersRequest; import com.amazonaws.services.elasticloadbalancing.model.DescribeLoadBalancersResult; import com.amazonaws.services.elasticloadbalancing.model.LoadBalancerDescription; import com.amazonaws.services.simpledb.AmazonSimpleDB; import com.amazonaws.services.simpledb.AmazonSimpleDBClient; import com.netflix.simianarmy.CloudClient; import com.netflix.simianarmy.NotFoundException;  import org.apache.commons.lang.Validate; import org.slf4j.Logger; import org.slf4j.LoggerFactory;  import java.util.ArrayList; import java.util.Arrays; import java.util.LinkedList; import java.util.List; import java.util.Map;   /**  * The Class AWSClient. Simple Amazon EC2 and Amazon ASG client interface.  */ public class AWSClient implements CloudClient {      /** The Constant LOGGER. */     private static final Logger LOGGER = LoggerFactory.getLogger(AWSClient.class);      /** The region. */     private final String region;      private final AWSCredentialsProvider awsCredentialsProvider;      /**      * This constructor will let the AWS SDK obtain the credentials, which will      * choose such in the following order:      *      * <ul>      * <li>Environment Variables: {@code AWS_ACCESS_KEY_ID} and      * {@code AWS_SECRET_KEY}</li>      * <li>Java System Properties: {@code aws.accessKeyId} and      * {@code aws.secretKey}</li>      * <li>Instance Metadata Service, which provides the credentials associated      * with the IAM role for the EC2 instance</li>      * </ul>      *      * <p>      * If credentials are provided explicitly, use      * {@link com.netflix.simianarmy.basic.BasicSimianArmyContext#exportCredentials(String, String)}      * which will set them as System properties used by each AWS SDK call.      * </p>      *      * <p>      * <b>Note:</b> Avoid storing credentials received dynamically via the      * {@link com.amazonaws.auth.InstanceProfileCredentialsProvider} as these will be rotated and      * their renewal is handled by its      * {@link com.amazonaws.auth.InstanceProfileCredentialsProvider#getCredentials()} method.      * </p>      *      * @param region      *            the region      * @see com.amazonaws.auth.DefaultAWSCredentialsProviderChain      * @see com.amazonaws.auth.InstanceProfileCredentialsProvider      * @see com.netflix.simianarmy.basic.BasicSimianArmyContext#exportCredentials(String, String)      */     public AWSClient(String region) {         this.region = region;         this.awsCredentialsProvider = null;     }      /**      * The constructor allows you to provide your own AWS credentials provider.      * @param region      *          the region      * @param awsCredentialsProvider      *          the AWS credentials provider      */     public AWSClient(String region, AWSCredentialsProvider awsCredentialsProvider) {         this.region = region;         this.awsCredentialsProvider = awsCredentialsProvider;     }      /**      * The Region.      *      * @return the region the client is configured to communicate with      */     public String region() {         return region;     }      /**      * Amazon EC2 client. Abstracted to aid testing.      *      * @return the Amazon EC2 client      */     protected AmazonEC2 ec2Client() {         AmazonEC2 client;         if (awsCredentialsProvider == null) {             client = new AmazonEC2Client();         } else {             client = new AmazonEC2Client(awsCredentialsProvider);         }         client.setEndpoint("ec2." + region + ".amazonaws.com");         return client;     }      /**      * Amazon ASG client. Abstracted to aid testing.      *      * @return the Amazon Auto Scaling client      */     protected AmazonAutoScalingClient asgClient() {         AmazonAutoScalingClient client;         if (awsCredentialsProvider == null) {             client = new AmazonAutoScalingClient();         } else {             client = new AmazonAutoScalingClient(awsCredentialsProvider);         }         client.setEndpoint("autoscaling." + region + ".amazonaws.com");         return client;     }      /**      * Amazon ELB client. Abstracted to aid testing.      *      * @return the Amazon ELB client      */     protected AmazonElasticLoadBalancingClient elbClient() {         AmazonElasticLoadBalancingClient client;         if (awsCredentialsProvider == null) {             client = new AmazonElasticLoadBalancingClient();         } else {             client = new AmazonElasticLoadBalancingClient(awsCredentialsProvider);         }         client.setEndpoint("elasticloadbalancing." + region + ".amazonaws.com");         return client;     }      /**      * Amazon SimpleDB client.      *      * @return the Amazon SimpleDB client      */     public AmazonSimpleDB sdbClient() {         AmazonSimpleDB client;         if (awsCredentialsProvider == null) {             client = new AmazonSimpleDBClient();         } else {             client = new AmazonSimpleDBClient(awsCredentialsProvider);         }         // us-east-1 has special naming         // http://docs.amazonwebservices.com/general/latest/gr/rande.html#sdb_region         if (region == null || region.equals("us-east-1")) {             client.setEndpoint("sdb.amazonaws.com");         } else {             client.setEndpoint("sdb." + region + ".amazonaws.com");         }         return client;     }      /**      * Describe auto scaling groups.      *      * @return the list      */     public List<AutoScalingGroup> describeAutoScalingGroups() {         return describeAutoScalingGroups((String[]) null);     }      /**      * Describe a set of specific auto scaling groups.      *      * @param names the ASG names      * @return the auto scaling groups      */     public List<AutoScalingGroup> describeAutoScalingGroups(String... names) {         if (names == null || names.length == 0) {             LOGGER.info(String.format("Getting all auto-scaling groups in region %s.", region));         } else {             LOGGER.info(String.format("Getting auto-scaling groups for %d names in region %s.", names.length, region));         }          List<AutoScalingGroup> asgs = new LinkedList<AutoScalingGroup>();          AmazonAutoScalingClient asgClient = asgClient();         DescribeAutoScalingGroupsRequest request = new DescribeAutoScalingGroupsRequest();         if (names != null) {             request.setAutoScalingGroupNames(Arrays.asList(names));         }         DescribeAutoScalingGroupsResult result = asgClient.describeAutoScalingGroups(request);          asgs.addAll(result.getAutoScalingGroups());         while (result.getNextToken() != null) {             request.setNextToken(result.getNextToken());             result = asgClient.describeAutoScalingGroups(request);             asgs.addAll(result.getAutoScalingGroups());         }          LOGGER.info(String.format("Got %d auto-scaling groups in region %s.", asgs.size(), region));         return asgs;     }      /**      * Describe a set of specific ELBs.      *      * @param names the ELB names      * @return the ELBs      */     public List<LoadBalancerDescription> describeElasticLoadBalancers(String... names) {         if (names == null || names.length == 0) {             LOGGER.info(String.format("Getting all ELBs in region %s.", region));         } else {             LOGGER.info(String.format("Getting ELBs for %d names in region %s.", names.length, region));         }          AmazonElasticLoadBalancingClient elbClient = elbClient();         DescribeLoadBalancersRequest request = new DescribeLoadBalancersRequest().withLoadBalancerNames(names);         DescribeLoadBalancersResult result = elbClient.describeLoadBalancers(request);         List<LoadBalancerDescription> elbs = result.getLoadBalancerDescriptions();         LOGGER.info(String.format("Got %d ELBs in region %s.", elbs.size(), region));         return elbs;     }       /**      * Describe a set of specific auto-scaling instances.      *      * @param instanceIds the instance ids      * @return the instances      */     public List<AutoScalingInstanceDetails> describeAutoScalingInstances(String... instanceIds) {         if (instanceIds == null || instanceIds.length == 0) {             LOGGER.info(String.format("Getting all auto-scaling instances in region %s.", region));         } else {             LOGGER.info(String.format("Getting auto-scaling instances for %d ids in region %s.",                     instanceIds.length, region));         }          List<AutoScalingInstanceDetails> instances = new LinkedList<AutoScalingInstanceDetails>();          AmazonAutoScalingClient asgClient = asgClient();         DescribeAutoScalingInstancesRequest request = new DescribeAutoScalingInstancesRequest();         if (instanceIds != null) {             request.setInstanceIds(Arrays.asList(instanceIds));         }         DescribeAutoScalingInstancesResult result = asgClient.describeAutoScalingInstances(request);          instances.addAll(result.getAutoScalingInstances());         while (result.getNextToken() != null) {             request = request.withNextToken(result.getNextToken());             result = asgClient.describeAutoScalingInstances(request);             instances.addAll(result.getAutoScalingInstances());         }          LOGGER.info(String.format("Got %d auto-scaling instances.", instances.size()));         return instances;     }      /**      * Describe a set of specific instances.      *      * @param instanceIds the instance ids      * @return the instances      */     public List<Instance> describeInstances(String... instanceIds) {         if (instanceIds == null || instanceIds.length == 0) {             LOGGER.info(String.format("Getting all EC2 instances in region %s.", region));         } else {             LOGGER.info(String.format("Getting EC2 instances for %d ids in region %s.", instanceIds.length, region));         }          List<Instance> instances = new LinkedList<Instance>();          AmazonEC2 ec2Client = ec2Client();         DescribeInstancesRequest request = new DescribeInstancesRequest();         if (instanceIds != null) {             request.withInstanceIds(Arrays.asList(instanceIds));         }         DescribeInstancesResult result = ec2Client.describeInstances(request);         for (Reservation reservation : result.getReservations()) {             instances.addAll(reservation.getInstances());         }          LOGGER.info(String.format("Got %d EC2 instances in region %s.", instances.size(), region));         return instances;     }      /**      * Describe a set of specific launch configurations.      *      * @param names the launch configuration names      * @return the launch configurations      */     public List<LaunchConfiguration> describeLaunchConfigurations(String... names) {         if (names == null || names.length == 0) {             LOGGER.info(String.format("Getting all launch configurations in region %s.", region));         } else {             LOGGER.info(String.format("Getting launch configurations for %d names in region %s.",                     names.length, region));         }          List<LaunchConfiguration> lcs = new LinkedList<LaunchConfiguration>();          AmazonAutoScalingClient asgClient = asgClient();         DescribeLaunchConfigurationsRequest request = new DescribeLaunchConfigurationsRequest()         .withLaunchConfigurationNames(names);         DescribeLaunchConfigurationsResult result = asgClient.describeLaunchConfigurations(request);          lcs.addAll(result.getLaunchConfigurations());         while (result.getNextToken() != null) {             request.setNextToken(result.getNextToken());             result = asgClient.describeLaunchConfigurations(request);             lcs.addAll(result.getLaunchConfigurations());         }          LOGGER.info(String.format("Got %d launch configurations in region %s.", lcs.size(), region));         return lcs;     }      /** {@inheritDoc} */     @Override     public void deleteAutoScalingGroup(String asgName) {         Validate.notEmpty(asgName);         LOGGER.info(String.format("Deleting auto-scaling group with name %s in region %s.", asgName, region));         AmazonAutoScalingClient asgClient = asgClient();         DeleteAutoScalingGroupRequest request = new DeleteAutoScalingGroupRequest()         .withAutoScalingGroupName(asgName);         asgClient.deleteAutoScalingGroup(request);     }      /** {@inheritDoc} */     @Override     public void deleteLaunchConfiguration(String launchConfigName) {         Validate.notEmpty(launchConfigName);         LOGGER.info(String.format("Deleting launch configuration with name %s in region %s.",                 launchConfigName, region));         AmazonAutoScalingClient asgClient = asgClient();         DeleteLaunchConfigurationRequest request = new DeleteLaunchConfigurationRequest()                 .withLaunchConfigurationName(launchConfigName);         asgClient.deleteLaunchConfiguration(request);     }      /** {@inheritDoc} */     @Override     public void deleteImage(String imageId) {         Validate.notEmpty(imageId);         LOGGER.info(String.format("Deleting image %s in region %s.",                 imageId, region));         AmazonEC2 ec2Client = ec2Client();         DeregisterImageRequest request = new DeregisterImageRequest(imageId);         ec2Client.deregisterImage(request);     }      /** {@inheritDoc} */     @Override     public void deleteVolume(String volumeId) {         Validate.notEmpty(volumeId);         LOGGER.info(String.format("Deleting volume %s in region %s.", volumeId, region));         AmazonEC2 ec2Client = ec2Client();         DeleteVolumeRequest request = new DeleteVolumeRequest().withVolumeId(volumeId);         ec2Client.deleteVolume(request);     }      /** {@inheritDoc} */     @Override     public void deleteSnapshot(String snapshotId) {         Validate.notEmpty(snapshotId);         LOGGER.info(String.format("Deleting snapshot %s in region %s.", snapshotId, region));         AmazonEC2 ec2Client = ec2Client();         DeleteSnapshotRequest request = new DeleteSnapshotRequest().withSnapshotId(snapshotId);         ec2Client.deleteSnapshot(request);     }      /** {@inheritDoc} */     @Override     public void terminateInstance(String instanceId) {         Validate.notEmpty(instanceId);         LOGGER.info(String.format("Terminating instance %s in region %s.", instanceId, region));         try {             ec2Client().terminateInstances(new TerminateInstancesRequest(Arrays.asList(instanceId)));         } catch (AmazonServiceException e) {             if (e.getErrorCode().equals("InvalidInstanceID.NotFound")) {                 throw new NotFoundException("AWS instance " + instanceId + " not found", e);             }             throw e;         }     }      /**      * Sets the security groups for an instance.      *      * Note this is only valid for VPC instances.      *      * @param instanceId      *            the instance id      *      * @throws NotFoundException      *             if the instance no longer exists or was already terminated after the crawler discovered it then you      *             should get a NotFoundException      */     public void setInstanceSecurityGroups(String instanceId, List<String> groups) {         Validate.notEmpty(instanceId);         LOGGER.info(String.format("Removing all security groups from instance %s in region %s.", instanceId, region));         try {             ModifyInstanceAttributeRequest request = new ModifyInstanceAttributeRequest();             request.setInstanceId(instanceId);             request.setGroups(groups);             ec2Client().modifyInstanceAttribute(request);         } catch (AmazonServiceException e) {             if (e.getErrorCode().equals("InvalidInstanceID.NotFound")) {                 throw new NotFoundException("AWS instance " + instanceId + " not found", e);             }             throw e;         }     }      /**      * Describe a set of specific EBS volumes.      *      * @param volumeIds the volume ids      * @return the volumes      */     public List<Volume> describeVolumes(String... volumeIds) {         if (volumeIds == null || volumeIds.length == 0) {             LOGGER.info(String.format("Getting all EBS volumes in region %s.", region));         } else {             LOGGER.info(String.format("Getting EBS volumes for %d ids in region %s.", volumeIds.length, region));         }          AmazonEC2 ec2Client = ec2Client();         DescribeVolumesRequest request = new DescribeVolumesRequest();         if (volumeIds != null) {             request.setVolumeIds(Arrays.asList(volumeIds));         }         DescribeVolumesResult result = ec2Client.describeVolumes(request);         List<Volume> volumes = result.getVolumes();          LOGGER.info(String.format("Got %d EBS volumes in region %s.", volumes.size(), region));         return volumes;     }      /**      * Describe a set of specific EBS snapshots.      *      * @param snapshotIds the snapshot ids      * @return the snapshots      */     public List<Snapshot> describeSnapshots(String... snapshotIds) {         if (snapshotIds == null || snapshotIds.length == 0) {             LOGGER.info(String.format("Getting all EBS snapshots in region %s.", region));         } else {             LOGGER.info(String.format("Getting EBS snapshotIds for %d ids in region %s.", snapshotIds.length, region));         }          AmazonEC2 ec2Client = ec2Client();         DescribeSnapshotsRequest request = new DescribeSnapshotsRequest();         // Set the owner id to self to avoid getting snapshots from other accounts.         request.withOwnerIds(Arrays.<String>asList("self"));         if (snapshotIds != null) {             request.setSnapshotIds(Arrays.asList(snapshotIds));         }         DescribeSnapshotsResult result = ec2Client.describeSnapshots(request);         List<Snapshot> snapshots = result.getSnapshots();          LOGGER.info(String.format("Got %d EBS snapshots in region %s.", snapshots.size(), region));         return snapshots;     }      @Override     public void createTagsForResources(Map<String, String> keyValueMap, String... resourceIds) {         Validate.notNull(keyValueMap);         Validate.notEmpty(keyValueMap);         Validate.notNull(resourceIds);         Validate.notEmpty(resourceIds);         AmazonEC2 ec2Client = ec2Client();         List<Tag> tags = new ArrayList<Tag>();         for (Map.Entry<String, String> entry : keyValueMap.entrySet()) {             tags.add(new Tag(entry.getKey(), entry.getValue()));         }         CreateTagsRequest req = new CreateTagsRequest(Arrays.asList(resourceIds), tags);         ec2Client.createTags(req);     }      /**      * Describe a set of specific images.      *      * @param imageIds the image ids      * @return the images      */     public List<Image> describeImages(String... imageIds) {         if (imageIds == null || imageIds.length == 0) {             LOGGER.info(String.format("Getting all AMIs in region %s.", region));         } else {             LOGGER.info(String.format("Getting AMIs for %d ids in region %s.", imageIds.length, region));         }          AmazonEC2 ec2Client = ec2Client();         DescribeImagesRequest request = new DescribeImagesRequest();         if (imageIds != null) {             request.setImageIds(Arrays.asList(imageIds));         }         DescribeImagesResult result = ec2Client.describeImages(request);         List<Image> images = result.getImages();          LOGGER.info(String.format("Got %d AMIs in region %s.", images.size(), region));         return images;     }                /**      * Describe a set of security groups      *       * @param instanceIds the instance ids      * @return the instances      */     public List<SecurityGroup> describeSecurityGroups(String... groupNames) {         AmazonEC2 ec2Client = ec2Client();         DescribeSecurityGroupsRequest request = new DescribeSecurityGroupsRequest();          if (groupNames == null || groupNames.length == 0) {             LOGGER.info(String.format("Getting all EC2 security groups in region %s.", region));             request.withGroupNames(groupNames);         } else {             LOGGER.info(String.format("Getting EC2 security groups for %d names in region %s.", groupNames.length,                     region));         }          DescribeSecurityGroupsResult result = ec2Client.describeSecurityGroups(request);          List<SecurityGroup> securityGroups = result.getSecurityGroups();         LOGGER.info(String.format("Got %d EC2 security groups in region %s.", securityGroups.size(), region));         return securityGroups;     }      /**      * Create an (empty) EC2 security group.      *       * @param name      *            Name of group to create      * @param description      *            Description of group to create      * @return ID of created group      */     public String createSecurityGroup(String name, String description) {         AmazonEC2 ec2Client = ec2Client();         CreateSecurityGroupRequest request = new CreateSecurityGroupRequest();         request.setGroupName(name);         request.setDescription(description);          LOGGER.info(String.format("Creating EC2 security group %s.", name));          CreateSecurityGroupResult result = ec2Client.createSecurityGroup(request);         return result.getGroupId();     } } " compose:StringConcatenation merge: LineBased]
