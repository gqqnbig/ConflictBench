Found the following features in expression file:
left
base
right
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/Paper/bowen-icsme-2023-data/ConflictBench/20_Conflicts/workspace/left/elastic-job-cloud/elastic-job-cloud-scheduler/src/main/java/com/dangdang/ddframe/job/cloud/scheduler/boot/MasterBootstrap.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/Paper/bowen-icsme-2023-data/ConflictBench/20_Conflicts/workspace/left/elastic-job-cloud/elastic-job-cloud-scheduler/src/main/java/com/dangdang/ddframe/job/cloud/scheduler/boot/MasterBootstrap.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/Paper/bowen-icsme-2023-data/ConflictBench/20_Conflicts/workspace/base/elastic-job-cloud/elastic-job-cloud-scheduler/src/main/java/com/dangdang/ddframe/job/cloud/scheduler/boot/MasterBootstrap.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/Paper/bowen-icsme-2023-data/ConflictBench/20_Conflicts/workspace/base/elastic-job-cloud/elastic-job-cloud-scheduler/src/main/java/com/dangdang/ddframe/job/cloud/scheduler/boot/MasterBootstrap.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/Paper/bowen-icsme-2023-data/ConflictBench/20_Conflicts/workspace/right/elastic-job-cloud/elastic-job-cloud-scheduler/src/main/java/com/dangdang/ddframe/job/cloud/scheduler/boot/MasterBootstrap.java
processing: /home/ppp/Research_Projects/Merge_Conflicts/Resource/Paper/bowen-icsme-2023-data/ConflictBench/20_Conflicts/workspace/right/elastic-job-cloud/elastic-job-cloud-scheduler/src/main/java/com/dangdang/ddframe/job/cloud/scheduler/boot/MasterBootstrap.java
[NT -> left : Feature]
	[NT -> elastic-job-cloud : Folder]
		[NT -> elastic-job-cloud-scheduler : Folder]
			[NT -> src : Folder]
				[NT -> main : Folder]
					[NT -> java : Folder]
						[NT -> com : Folder]
							[NT -> dangdang : Folder]
								[NT -> ddframe : Folder]
									[NT -> job : Folder]
										[NT -> cloud : Folder]
											[NT -> scheduler : Folder]
												[NT -> boot : Folder]
													[NT -> MasterBootstrap.java : Java-File]
														[NT -> - : CompilationUnit]
															[T -> - : PackageDeclaration "package com.dangdang.ddframe.job.cloud.scheduler.boot;" compose:Replacement merge: Default]
															[T -> com.dangdang.ddframe.job.cloud.scheduler.boot.env.BootstrapEnvironment{ImportPackage} : ImportDeclaration "import com.dangdang.ddframe.job.cloud.scheduler.boot.env.BootstrapEnvironment;" compose:Replacement merge: Default]
															[T -> com.dangdang.ddframe.job.cloud.scheduler.boot.env.MesosConfiguration{ImportPackage} : ImportDeclaration "import com.dangdang.ddframe.job.cloud.scheduler.boot.env.MesosConfiguration;" compose:Replacement merge: Default]
															[T -> com.dangdang.ddframe.job.cloud.scheduler.config.CloudJobConfigurationListener{ImportPackage} : ImportDeclaration "import com.dangdang.ddframe.job.cloud.scheduler.config.CloudJobConfigurationListener;" compose:Replacement merge: Default]
															[T -> com.dangdang.ddframe.job.cloud.scheduler.config.ConfigurationNode{ImportPackage} : ImportDeclaration "import com.dangdang.ddframe.job.cloud.scheduler.config.ConfigurationNode;" compose:Replacement merge: Default]
															[T -> com.dangdang.ddframe.job.cloud.scheduler.ha.FrameworkIDService{ImportPackage} : ImportDeclaration "import com.dangdang.ddframe.job.cloud.scheduler.ha.FrameworkIDService;" compose:Replacement merge: Default]
															[T -> com.dangdang.ddframe.job.cloud.scheduler.mesos.FacadeService{ImportPackage} : ImportDeclaration "import com.dangdang.ddframe.job.cloud.scheduler.mesos.FacadeService;" compose:Replacement merge: Default]
															[T -> com.dangdang.ddframe.job.cloud.scheduler.mesos.LeasesQueue{ImportPackage} : ImportDeclaration "import com.dangdang.ddframe.job.cloud.scheduler.mesos.LeasesQueue;" compose:Replacement merge: Default]
															[T -> com.dangdang.ddframe.job.cloud.scheduler.ha.ReconcileScheduledService{ImportPackage} : ImportDeclaration "import com.dangdang.ddframe.job.cloud.scheduler.ha.ReconcileScheduledService;" compose:Replacement merge: Default]
															[T -> com.dangdang.ddframe.job.cloud.scheduler.mesos.SchedulerEngine{ImportPackage} : ImportDeclaration "import com.dangdang.ddframe.job.cloud.scheduler.mesos.SchedulerEngine;" compose:Replacement merge: Default]
															[T -> com.dangdang.ddframe.job.cloud.scheduler.mesos.StatisticsScheduledService{ImportPackage} : ImportDeclaration "import com.dangdang.ddframe.job.cloud.scheduler.mesos.StatisticsScheduledService;" compose:Replacement merge: Default]
															[T -> com.dangdang.ddframe.job.cloud.scheduler.mesos.TaskLaunchScheduledService{ImportPackage} : ImportDeclaration "import com.dangdang.ddframe.job.cloud.scheduler.mesos.TaskLaunchScheduledService;" compose:Replacement merge: Default]
															[T -> com.dangdang.ddframe.job.cloud.scheduler.producer.ProducerManager{ImportPackage} : ImportDeclaration "import com.dangdang.ddframe.job.cloud.scheduler.producer.ProducerManager;" compose:Replacement merge: Default]
															[T -> com.dangdang.ddframe.job.cloud.scheduler.restful.CloudJobRestfulApi{ImportPackage} : ImportDeclaration "import com.dangdang.ddframe.job.cloud.scheduler.restful.CloudJobRestfulApi;" compose:Replacement merge: Default]
															[T -> com.dangdang.ddframe.job.cloud.scheduler.statistics.StatisticManager{ImportPackage} : ImportDeclaration "import com.dangdang.ddframe.job.cloud.scheduler.statistics.StatisticManager;" compose:Replacement merge: Default]
															[T -> com.dangdang.ddframe.job.event.JobEventBus{ImportPackage} : ImportDeclaration "import com.dangdang.ddframe.job.event.JobEventBus;" compose:Replacement merge: Default]
															[T -> com.dangdang.ddframe.job.event.rdb.JobEventRdbConfiguration{ImportPackage} : ImportDeclaration "import com.dangdang.ddframe.job.event.rdb.JobEventRdbConfiguration;" compose:Replacement merge: Default]
															[T -> com.dangdang.ddframe.job.event.rdb.JobEventRdbSearch{ImportPackage} : ImportDeclaration "import com.dangdang.ddframe.job.event.rdb.JobEventRdbSearch;" compose:Replacement merge: Default]
															[T -> com.dangdang.ddframe.job.reg.base.CoordinatorRegistryCenter{ImportPackage} : ImportDeclaration "import com.dangdang.ddframe.job.reg.base.CoordinatorRegistryCenter;" compose:Replacement merge: Default]
															[T -> com.dangdang.ddframe.job.reg.zookeeper.ZookeeperRegistryCenter{ImportPackage} : ImportDeclaration "import com.dangdang.ddframe.job.reg.zookeeper.ZookeeperRegistryCenter;" compose:Replacement merge: Default]
															[T -> com.dangdang.ddframe.job.restful.RestfulServer{ImportPackage} : ImportDeclaration "import com.dangdang.ddframe.job.restful.RestfulServer;" compose:Replacement merge: Default]
															[T -> com.google.common.base.Optional{ImportPackage} : ImportDeclaration "import com.google.common.base.Optional;" compose:Replacement merge: Default]
															[T -> com.google.common.util.concurrent.Service{ImportPackage} : ImportDeclaration "import com.google.common.util.concurrent.Service;" compose:Replacement merge: Default]
															[T -> com.netflix.fenzo.TaskScheduler{ImportPackage} : ImportDeclaration "import com.netflix.fenzo.TaskScheduler;" compose:Replacement merge: Default]
															[T -> com.netflix.fenzo.VirtualMachineLease{ImportPackage} : ImportDeclaration "import com.netflix.fenzo.VirtualMachineLease;" compose:Replacement merge: Default]
															[T -> com.netflix.fenzo.functions.Action1{ImportPackage} : ImportDeclaration "import com.netflix.fenzo.functions.Action1;" compose:Replacement merge: Default]
															[T -> lombok.extern.slf4j.Slf4j{ImportPackage} : ImportDeclaration "import lombok.extern.slf4j.Slf4j;" compose:Replacement merge: Default]
															[T -> org.apache.curator.framework.recipes.cache.TreeCache{ImportPackage} : ImportDeclaration "import org.apache.curator.framework.recipes.cache.TreeCache;" compose:Replacement merge: Default]
															[T -> org.apache.mesos.MesosSchedulerDriver{ImportPackage} : ImportDeclaration "import org.apache.mesos.MesosSchedulerDriver;" compose:Replacement merge: Default]
															[T -> org.apache.mesos.Protos{ImportPackage} : ImportDeclaration "import org.apache.mesos.Protos;" compose:Replacement merge: Default]
															[T -> org.apache.mesos.SchedulerDriver{ImportPackage} : ImportDeclaration "import org.apache.mesos.SchedulerDriver;" compose:Replacement merge: Default]
															[T -> java.util.concurrent.Executors{ImportPackage} : ImportDeclaration "import java.util.concurrent.Executors;" compose:Replacement merge: Default]
															[NT -> MasterBootstrap : ClassDeclaration]
																[T -> - : Modifiers "@Slf4j public final" compose:Replacement merge: SemanticConflict]
																[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
																[T -> MasterBootstrap : Id "MasterBootstrap" compose:Replacement merge: Default]
																[T -> WEBAPP_PATH : FieldDecl "private static final String WEBAPP_PATH = "webapp/";" compose:Replacement merge: SemanticConflict]
																[T -> ONE_WEEK_TIMEOUT : FieldDecl "private static final double ONE_WEEK_TIMEOUT = 60 * 60 * 24 * 7;" compose:Replacement merge: SemanticConflict]
																[T -> env : FieldDecl "private final BootstrapEnvironment env;" compose:Replacement merge: SemanticConflict]
																[T -> regCenter : FieldDecl "private final CoordinatorRegistryCenter regCenter;" compose:Replacement merge: SemanticConflict]
																[T -> facadeService : FieldDecl "private final FacadeService facadeService;" compose:Replacement merge: SemanticConflict]
																[T -> statisticManager : FieldDecl "private final StatisticManager statisticManager;" compose:Replacement merge: SemanticConflict]
																[T -> restfulServer : FieldDecl "private final RestfulServer restfulServer;" compose:Replacement merge: SemanticConflict]
																[T -> frameworkIDService : FieldDecl "private final FrameworkIDService frameworkIDService;" compose:Replacement merge: SemanticConflict]
																[T -> schedulerDriver : FieldDecl "private SchedulerDriver schedulerDriver;" compose:Replacement merge: SemanticConflict]
																[T -> producerManager : FieldDecl "private ProducerManager producerManager;" compose:Replacement merge: SemanticConflict]
																[T -> cloudJobConfigurationListener : FieldDecl "private CloudJobConfigurationListener cloudJobConfigurationListener;" compose:Replacement merge: SemanticConflict]
																[T -> taskLaunchScheduledService : FieldDecl "private Service taskLaunchScheduledService;" compose:Replacement merge: SemanticConflict]
																[T -> statisticsScheduledService : FieldDecl "private Service statisticsScheduledService;" compose:Replacement merge: SemanticConflict]
																[T -> reconcileScheduledService : FieldDecl "private Service reconcileScheduledService;" compose:Replacement merge: SemanticConflict]
																[T -> MasterBootstrap({FormalParametersInternal}) : ConstructorDecl "public MasterBootstrap() {         env = BootstrapEnvironment.getInstance();         regCenter = getRegistryCenter();         facadeService = new FacadeService(regCenter);         Optional<JobEventRdbSearch> jobEventRdbSearch = Optional.absent();         if (env.getJobEventRdbConfiguration().isPresent()) {             jobEventRdbSearch = Optional.of(new JobEventRdbSearch(env.getJobEventRdbConfiguration().get().getDataSource()));         }         statisticManager = StatisticManager.getInstance(regCenter, env.getJobEventRdbConfiguration());         restfulServer = new RestfulServer(env.getRestfulServerConfiguration().getPort());         frameworkIDService = new FrameworkIDService(regCenter);         CloudJobRestfulApi.init(regCenter, jobEventRdbSearch);     }" compose:Replacement merge: LineBased]
																[T -> getRegistryCenter({FormalParametersInternal}) : MethodDecl "private CoordinatorRegistryCenter getRegistryCenter() {         CoordinatorRegistryCenter result = new ZookeeperRegistryCenter(env.getZookeeperConfiguration());         result.init();         return result;     }" compose:Replacement merge: LineBased]
																[T -> start({FormalParametersInternal}) : MethodDecl "public void start() throws Exception {         LeasesQueue leasesQueue = new LeasesQueue();         TaskScheduler taskScheduler = getTaskScheduler();         JobEventBus jobEventBus = getJobEventBus();         schedulerDriver = getSchedulerDriver(leasesQueue, taskScheduler, jobEventBus);         producerManager = new ProducerManager(schedulerDriver, regCenter);         producerManager.startup();         CloudJobRestfulApi.setContext(schedulerDriver, producerManager);         log.info("Elastic Job: Add configuration listener");         cloudJobConfigurationListener =  new CloudJobConfigurationListener(schedulerDriver, producerManager, regCenter);         getCache().getListenable().addListener(cloudJobConfigurationListener, Executors.newSingleThreadExecutor());         taskLaunchScheduledService = new TaskLaunchScheduledService(leasesQueue, schedulerDriver, taskScheduler, facadeService, jobEventBus).startAsync();         statisticsScheduledService = new StatisticsScheduledService(regCenter).startAsync();         reconcileScheduledService =  ReconcileScheduledService.builder().facadeService(facadeService).scheduler(schedulerDriver).build().startAsync();         statisticManager.startup();         restfulServer.start(CloudJobRestfulApi.class.getPackage().getName(), WEBAPP_PATH);         schedulerDriver.start();     }" compose:Replacement merge: LineBased]
																[T -> getSchedulerDriver(LeasesQueue-LeasesQueue-TaskScheduler-TaskScheduler-JobEventBus-JobEventBus) : MethodDecl "private SchedulerDriver getSchedulerDriver(final LeasesQueue leasesQueue, final TaskScheduler taskScheduler, final JobEventBus jobEventBus) {         MesosConfiguration mesosConfig = env.getMesosConfiguration();         Optional<String> frameworkIDOptional = frameworkIDService.fetch();         Protos.FrameworkInfo.Builder builder = Protos.FrameworkInfo.newBuilder();         if (frameworkIDOptional.isPresent()) {             builder.setId(Protos.FrameworkID.newBuilder().setValue(frameworkIDOptional.get()).build());         }         Protos.FrameworkInfo frameworkInfo = builder.setUser(mesosConfig.getUser()).setName(MesosConfiguration.FRAMEWORK_NAME)                         .setHostname(mesosConfig.getHostname()).setFailoverTimeout(ONE_WEEK_TIMEOUT).build();         return new MesosSchedulerDriver(new SchedulerEngine(leasesQueue, taskScheduler, facadeService, jobEventBus, frameworkIDService, statisticManager), frameworkInfo, mesosConfig.getUrl());     }" compose:Replacement merge: LineBased]
																[T -> getTaskScheduler({FormalParametersInternal}) : MethodDecl "private TaskScheduler getTaskScheduler() {         return new TaskScheduler.Builder()                 .withLeaseOfferExpirySecs(1000000000L)                 .withLeaseRejectAction(new Action1<VirtualMachineLease>() {                                          @Override                     public void call(final VirtualMachineLease lease) {                         log.warn("Declining offer on '{}'", lease.hostname());                         schedulerDriver.declineOffer(lease.getOffer().getId());                     }                 }).build();     }" compose:Replacement merge: LineBased]
																[T -> getJobEventBus({FormalParametersInternal}) : MethodDecl "private JobEventBus getJobEventBus() {         Optional<JobEventRdbConfiguration> rdbConfig = env.getJobEventRdbConfiguration();         if (rdbConfig.isPresent()) {             return new JobEventBus(rdbConfig.get());         }         return new JobEventBus();     }" compose:Replacement merge: LineBased]
																[T -> getCache({FormalParametersInternal}) : MethodDecl "private TreeCache getCache() {         TreeCache result = (TreeCache) regCenter.getRawCache(ConfigurationNode.ROOT);         if (null != result) {             return result;         }         regCenter.addCacheData(ConfigurationNode.ROOT);         return (TreeCache) regCenter.getRawCache(ConfigurationNode.ROOT);     }" compose:Replacement merge: LineBased]
																[T -> stop({FormalParametersInternal}) : MethodDecl "public synchronized void stop() {         if (null != taskLaunchScheduledService) {             taskLaunchScheduledService.stopAsync();         }         if (null != statisticsScheduledService) {             statisticsScheduledService.stopAsync();         }         if (null != reconcileScheduledService) {             reconcileScheduledService.stopAsync();         }         restfulServer.stop();         statisticManager.shutdown();         if (null != cloudJobConfigurationListener) {             log.info("Elastic Job: Remove configuration listener");             getCache().getListenable().removeListener(cloudJobConfigurationListener);         }         if (null != producerManager) {             producerManager.shutdown();         }         if (null != schedulerDriver) {             schedulerDriver.stop(true);         }     }" compose:Replacement merge: LineBased]
[NT -> base : Feature]
	[NT -> elastic-job-cloud : Folder]
		[NT -> elastic-job-cloud-scheduler : Folder]
			[NT -> src : Folder]
				[NT -> main : Folder]
					[NT -> java : Folder]
						[NT -> com : Folder]
							[NT -> dangdang : Folder]
								[NT -> ddframe : Folder]
									[NT -> job : Folder]
										[NT -> cloud : Folder]
											[NT -> scheduler : Folder]
												[NT -> boot : Folder]
													[NT -> MasterBootstrap.java : Java-File]
														[NT -> - : CompilationUnit]
															[T -> - : PackageDeclaration "package com.dangdang.ddframe.job.cloud.scheduler.boot;" compose:Replacement merge: Default]
															[T -> com.dangdang.ddframe.job.cloud.scheduler.boot.env.BootstrapEnvironment{ImportPackage} : ImportDeclaration "import com.dangdang.ddframe.job.cloud.scheduler.boot.env.BootstrapEnvironment;" compose:Replacement merge: Default]
															[T -> com.dangdang.ddframe.job.cloud.scheduler.boot.env.MesosConfiguration{ImportPackage} : ImportDeclaration "import com.dangdang.ddframe.job.cloud.scheduler.boot.env.MesosConfiguration;" compose:Replacement merge: Default]
															[T -> com.dangdang.ddframe.job.cloud.scheduler.config.CloudJobConfigurationListener{ImportPackage} : ImportDeclaration "import com.dangdang.ddframe.job.cloud.scheduler.config.CloudJobConfigurationListener;" compose:Replacement merge: Default]
															[T -> com.dangdang.ddframe.job.cloud.scheduler.config.ConfigurationNode{ImportPackage} : ImportDeclaration "import com.dangdang.ddframe.job.cloud.scheduler.config.ConfigurationNode;" compose:Replacement merge: Default]
															[T -> com.dangdang.ddframe.job.cloud.scheduler.mesos.FacadeService{ImportPackage} : ImportDeclaration "import com.dangdang.ddframe.job.cloud.scheduler.mesos.FacadeService;" compose:Replacement merge: Default]
															[T -> com.dangdang.ddframe.job.cloud.scheduler.mesos.LeasesQueue{ImportPackage} : ImportDeclaration "import com.dangdang.ddframe.job.cloud.scheduler.mesos.LeasesQueue;" compose:Replacement merge: Default]
															[T -> com.dangdang.ddframe.job.cloud.scheduler.mesos.SchedulerEngine{ImportPackage} : ImportDeclaration "import com.dangdang.ddframe.job.cloud.scheduler.mesos.SchedulerEngine;" compose:Replacement merge: Default]
															[T -> com.dangdang.ddframe.job.cloud.scheduler.mesos.StatisticsProcessor{ImportPackage} : ImportDeclaration "import com.dangdang.ddframe.job.cloud.scheduler.mesos.StatisticsProcessor;" compose:Replacement merge: Default]
															[T -> com.dangdang.ddframe.job.cloud.scheduler.mesos.TaskLaunchProcessor{ImportPackage} : ImportDeclaration "import com.dangdang.ddframe.job.cloud.scheduler.mesos.TaskLaunchProcessor;" compose:Replacement merge: Default]
															[T -> com.dangdang.ddframe.job.cloud.scheduler.producer.ProducerManager{ImportPackage} : ImportDeclaration "import com.dangdang.ddframe.job.cloud.scheduler.producer.ProducerManager;" compose:Replacement merge: Default]
															[T -> com.dangdang.ddframe.job.cloud.scheduler.producer.ProducerManagerFactory{ImportPackage} : ImportDeclaration "import com.dangdang.ddframe.job.cloud.scheduler.producer.ProducerManagerFactory;" compose:Replacement merge: Default]
															[T -> com.dangdang.ddframe.job.cloud.scheduler.restful.CloudJobRestfulApi{ImportPackage} : ImportDeclaration "import com.dangdang.ddframe.job.cloud.scheduler.restful.CloudJobRestfulApi;" compose:Replacement merge: Default]
															[T -> com.dangdang.ddframe.job.cloud.scheduler.statistics.StatisticManager{ImportPackage} : ImportDeclaration "import com.dangdang.ddframe.job.cloud.scheduler.statistics.StatisticManager;" compose:Replacement merge: Default]
															[T -> com.dangdang.ddframe.job.event.JobEventBus{ImportPackage} : ImportDeclaration "import com.dangdang.ddframe.job.event.JobEventBus;" compose:Replacement merge: Default]
															[T -> com.dangdang.ddframe.job.event.rdb.JobEventRdbConfiguration{ImportPackage} : ImportDeclaration "import com.dangdang.ddframe.job.event.rdb.JobEventRdbConfiguration;" compose:Replacement merge: Default]
															[T -> com.dangdang.ddframe.job.event.rdb.JobEventRdbSearch{ImportPackage} : ImportDeclaration "import com.dangdang.ddframe.job.event.rdb.JobEventRdbSearch;" compose:Replacement merge: Default]
															[T -> com.dangdang.ddframe.job.reg.base.CoordinatorRegistryCenter{ImportPackage} : ImportDeclaration "import com.dangdang.ddframe.job.reg.base.CoordinatorRegistryCenter;" compose:Replacement merge: Default]
															[T -> com.dangdang.ddframe.job.reg.zookeeper.ZookeeperRegistryCenter{ImportPackage} : ImportDeclaration "import com.dangdang.ddframe.job.reg.zookeeper.ZookeeperRegistryCenter;" compose:Replacement merge: Default]
															[T -> com.dangdang.ddframe.job.restful.RestfulServer{ImportPackage} : ImportDeclaration "import com.dangdang.ddframe.job.restful.RestfulServer;" compose:Replacement merge: Default]
															[T -> com.google.common.base.Optional{ImportPackage} : ImportDeclaration "import com.google.common.base.Optional;" compose:Replacement merge: Default]
															[T -> com.netflix.fenzo.TaskScheduler{ImportPackage} : ImportDeclaration "import com.netflix.fenzo.TaskScheduler;" compose:Replacement merge: Default]
															[T -> com.netflix.fenzo.VirtualMachineLease{ImportPackage} : ImportDeclaration "import com.netflix.fenzo.VirtualMachineLease;" compose:Replacement merge: Default]
															[T -> com.netflix.fenzo.functions.Action1{ImportPackage} : ImportDeclaration "import com.netflix.fenzo.functions.Action1;" compose:Replacement merge: Default]
															[T -> lombok.extern.slf4j.Slf4j{ImportPackage} : ImportDeclaration "import lombok.extern.slf4j.Slf4j;" compose:Replacement merge: Default]
															[T -> org.apache.curator.framework.recipes.cache.TreeCache{ImportPackage} : ImportDeclaration "import org.apache.curator.framework.recipes.cache.TreeCache;" compose:Replacement merge: Default]
															[T -> org.apache.mesos.MesosSchedulerDriver{ImportPackage} : ImportDeclaration "import org.apache.mesos.MesosSchedulerDriver;" compose:Replacement merge: Default]
															[T -> org.apache.mesos.Protos{ImportPackage} : ImportDeclaration "import org.apache.mesos.Protos;" compose:Replacement merge: Default]
															[T -> org.apache.mesos.SchedulerDriver{ImportPackage} : ImportDeclaration "import org.apache.mesos.SchedulerDriver;" compose:Replacement merge: Default]
															[NT -> MasterBootstrap : ClassDeclaration]
																[T -> - : Modifiers "@Slf4j public final" compose:Replacement merge: SemanticConflict]
																[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
																[T -> MasterBootstrap : Id "MasterBootstrap" compose:Replacement merge: Default]
																[T -> WEBAPP_PATH : FieldDecl "private static final String WEBAPP_PATH = "webapp/";" compose:Replacement merge: SemanticConflict]
																[T -> env : FieldDecl "private final BootstrapEnvironment env;" compose:Replacement merge: SemanticConflict]
																[T -> regCenter : FieldDecl "private final CoordinatorRegistryCenter regCenter;" compose:Replacement merge: SemanticConflict]
																[T -> schedulerDriver : FieldDecl "private final SchedulerDriver schedulerDriver;" compose:Replacement merge: SemanticConflict]
																[T -> restfulServer : FieldDecl "private final RestfulServer restfulServer;" compose:Replacement merge: SemanticConflict]
																[T -> MasterBootstrap({FormalParametersInternal}) : ConstructorDecl "public MasterBootstrap() {         env = BootstrapEnvironment.getInstance();         regCenter = getRegistryCenter();         LeasesQueue leasesQueue = new LeasesQueue();         final FacadeService facadeService = new FacadeService(regCenter);         TaskScheduler taskScheduler = getTaskScheduler();         JobEventBus jobEventBus = getJobEventBus();         Optional<JobEventRdbSearch> jobEventRdbSearch = Optional.absent();         if (env.getJobEventRdbConfiguration().isPresent()) {             jobEventRdbSearch = Optional.of(new JobEventRdbSearch(env.getJobEventRdbConfiguration().get().getDataSource()));         }         final StatisticManager statisticManager = StatisticManager.getInstance(regCenter, env.getJobEventRdbConfiguration());         statisticManager.startup();         schedulerDriver = getSchedulerDriver(leasesQueue, taskScheduler, facadeService, jobEventBus, statisticManager);         restfulServer = new RestfulServer(env.getRestfulServerConfiguration().getPort());         CloudJobRestfulApi.init(schedulerDriver, regCenter, jobEventRdbSearch);         initConfigurationListener();         final ProducerManager producerManager = ProducerManagerFactory.getInstance(schedulerDriver, regCenter);         producerManager.startup();         new Thread(new TaskLaunchProcessor(leasesQueue, schedulerDriver, taskScheduler, facadeService, jobEventBus), "task-launch-processor-" + Thread.currentThread().getId()).start();         new Thread(new StatisticsProcessor(), "statistics-processor-" + Thread.currentThread().getId()).start();         Runtime.getRuntime().addShutdownHook(new Thread() {                          @Override             public void run() {                 facadeService.stop();                 producerManager.shutdown();                 statisticManager.shutdown();             }         });     }" compose:Replacement merge: LineBased]
																[T -> getRegistryCenter({FormalParametersInternal}) : MethodDecl "private CoordinatorRegistryCenter getRegistryCenter() {         CoordinatorRegistryCenter result = new ZookeeperRegistryCenter(env.getZookeeperConfiguration());         result.init();         return result;     }" compose:Replacement merge: LineBased]
																[T -> getSchedulerDriver(LeasesQueue-LeasesQueue-TaskScheduler-TaskScheduler-FacadeService-FacadeService-JobEventBus-JobEventBus-StatisticManager-StatisticManager) : MethodDecl "private SchedulerDriver getSchedulerDriver(             final LeasesQueue leasesQueue, final TaskScheduler taskScheduler, final FacadeService facadeService, final JobEventBus jobEventBus, final StatisticManager statisticManager) {         MesosConfiguration mesosConfig = env.getMesosConfiguration();         Protos.FrameworkInfo frameworkInfo =                  Protos.FrameworkInfo.newBuilder().setUser(mesosConfig.getUser()).setName(MesosConfiguration.FRAMEWORK_NAME).setHostname(mesosConfig.getHostname()).build();         return new MesosSchedulerDriver(new SchedulerEngine(leasesQueue, taskScheduler, facadeService, jobEventBus, statisticManager), frameworkInfo, mesosConfig.getUrl());     }" compose:Replacement merge: LineBased]
																[T -> getTaskScheduler({FormalParametersInternal}) : MethodDecl "private TaskScheduler getTaskScheduler() {         return new TaskScheduler.Builder()                 .withLeaseOfferExpirySecs(1000000000L)                 .withLeaseRejectAction(new Action1<VirtualMachineLease>() {                                          @Override                     public void call(final VirtualMachineLease lease) {                         log.warn("Declining offer on '{}'", lease.hostname());                         schedulerDriver.declineOffer(lease.getOffer().getId());                     }                 }).build();     }" compose:Replacement merge: LineBased]
																[T -> initConfigurationListener({FormalParametersInternal}) : MethodDecl "private void initConfigurationListener() {         regCenter.addCacheData(ConfigurationNode.ROOT);         ((TreeCache) regCenter.getRawCache(ConfigurationNode.ROOT)).getListenable().addListener(new CloudJobConfigurationListener(schedulerDriver, regCenter));     }" compose:Replacement merge: LineBased]
																[T -> getJobEventBus({FormalParametersInternal}) : MethodDecl "private JobEventBus getJobEventBus() {         Optional<JobEventRdbConfiguration> rdbConfig = env.getJobEventRdbConfiguration();         if (rdbConfig.isPresent()) {             return new JobEventBus(rdbConfig.get());         }         return new JobEventBus();     }" compose:Replacement merge: LineBased]
																[T -> runAsDaemon({FormalParametersInternal}) : MethodDecl "public Protos.Status runAsDaemon() throws Exception {         restfulServer.start(CloudJobRestfulApi.class.getPackage().getName(), WEBAPP_PATH);         return schedulerDriver.run();     }" compose:Replacement merge: LineBased]
																[T -> stop(Protos.Status-Protos.Status) : MethodDecl "public boolean stop(final Protos.Status status) throws Exception {         schedulerDriver.stop();         restfulServer.stop();         return Protos.Status.DRIVER_STOPPED == status;     }" compose:Replacement merge: LineBased]
[NT -> right : Feature]
	[NT -> elastic-job-cloud : Folder]
		[NT -> elastic-job-cloud-scheduler : Folder]
			[NT -> src : Folder]
				[NT -> main : Folder]
					[NT -> java : Folder]
						[NT -> com : Folder]
							[NT -> dangdang : Folder]
								[NT -> ddframe : Folder]
									[NT -> job : Folder]
										[NT -> cloud : Folder]
											[NT -> scheduler : Folder]
												[NT -> boot : Folder]
													[NT -> MasterBootstrap.java : Java-File]
														[NT -> - : CompilationUnit]
															[T -> - : PackageDeclaration "package com.dangdang.ddframe.job.cloud.scheduler.boot;" compose:Replacement merge: Default]
															[T -> com.dangdang.ddframe.job.cloud.scheduler.boot.env.BootstrapEnvironment{ImportPackage} : ImportDeclaration "import com.dangdang.ddframe.job.cloud.scheduler.boot.env.BootstrapEnvironment;" compose:Replacement merge: Default]
															[T -> com.dangdang.ddframe.job.cloud.scheduler.boot.env.MesosConfiguration{ImportPackage} : ImportDeclaration "import com.dangdang.ddframe.job.cloud.scheduler.boot.env.MesosConfiguration;" compose:Replacement merge: Default]
															[T -> com.dangdang.ddframe.job.cloud.scheduler.config.CloudJobConfigurationListener{ImportPackage} : ImportDeclaration "import com.dangdang.ddframe.job.cloud.scheduler.config.CloudJobConfigurationListener;" compose:Replacement merge: Default]
															[T -> com.dangdang.ddframe.job.cloud.scheduler.config.ConfigurationNode{ImportPackage} : ImportDeclaration "import com.dangdang.ddframe.job.cloud.scheduler.config.ConfigurationNode;" compose:Replacement merge: Default]
															[T -> com.dangdang.ddframe.job.cloud.scheduler.mesos.FacadeService{ImportPackage} : ImportDeclaration "import com.dangdang.ddframe.job.cloud.scheduler.mesos.FacadeService;" compose:Replacement merge: Default]
															[T -> com.dangdang.ddframe.job.cloud.scheduler.mesos.LeasesQueue{ImportPackage} : ImportDeclaration "import com.dangdang.ddframe.job.cloud.scheduler.mesos.LeasesQueue;" compose:Replacement merge: Default]
															[T -> com.dangdang.ddframe.job.cloud.scheduler.mesos.SchedulerEngine{ImportPackage} : ImportDeclaration "import com.dangdang.ddframe.job.cloud.scheduler.mesos.SchedulerEngine;" compose:Replacement merge: Default]
															[T -> com.dangdang.ddframe.job.cloud.scheduler.mesos.StatisticsProcessor{ImportPackage} : ImportDeclaration "import com.dangdang.ddframe.job.cloud.scheduler.mesos.StatisticsProcessor;" compose:Replacement merge: Default]
															[T -> com.dangdang.ddframe.job.cloud.scheduler.mesos.TaskLaunchProcessor{ImportPackage} : ImportDeclaration "import com.dangdang.ddframe.job.cloud.scheduler.mesos.TaskLaunchProcessor;" compose:Replacement merge: Default]
															[T -> com.dangdang.ddframe.job.cloud.scheduler.producer.ProducerManager{ImportPackage} : ImportDeclaration "import com.dangdang.ddframe.job.cloud.scheduler.producer.ProducerManager;" compose:Replacement merge: Default]
															[T -> com.dangdang.ddframe.job.cloud.scheduler.producer.ProducerManagerFactory{ImportPackage} : ImportDeclaration "import com.dangdang.ddframe.job.cloud.scheduler.producer.ProducerManagerFactory;" compose:Replacement merge: Default]
															[T -> com.dangdang.ddframe.job.cloud.scheduler.restful.CloudJobRestfulApi{ImportPackage} : ImportDeclaration "import com.dangdang.ddframe.job.cloud.scheduler.restful.CloudJobRestfulApi;" compose:Replacement merge: Default]
															[T -> com.dangdang.ddframe.job.cloud.scheduler.statistics.StatisticManager{ImportPackage} : ImportDeclaration "import com.dangdang.ddframe.job.cloud.scheduler.statistics.StatisticManager;" compose:Replacement merge: Default]
															[T -> com.dangdang.ddframe.job.event.JobEventBus{ImportPackage} : ImportDeclaration "import com.dangdang.ddframe.job.event.JobEventBus;" compose:Replacement merge: Default]
															[T -> com.dangdang.ddframe.job.event.rdb.JobEventRdbConfiguration{ImportPackage} : ImportDeclaration "import com.dangdang.ddframe.job.event.rdb.JobEventRdbConfiguration;" compose:Replacement merge: Default]
															[T -> com.dangdang.ddframe.job.reg.base.CoordinatorRegistryCenter{ImportPackage} : ImportDeclaration "import com.dangdang.ddframe.job.reg.base.CoordinatorRegistryCenter;" compose:Replacement merge: Default]
															[T -> com.dangdang.ddframe.job.reg.zookeeper.ZookeeperRegistryCenter{ImportPackage} : ImportDeclaration "import com.dangdang.ddframe.job.reg.zookeeper.ZookeeperRegistryCenter;" compose:Replacement merge: Default]
															[T -> com.dangdang.ddframe.job.restful.RestfulServer{ImportPackage} : ImportDeclaration "import com.dangdang.ddframe.job.restful.RestfulServer;" compose:Replacement merge: Default]
															[T -> com.google.common.base.Optional{ImportPackage} : ImportDeclaration "import com.google.common.base.Optional;" compose:Replacement merge: Default]
															[T -> com.netflix.fenzo.TaskScheduler{ImportPackage} : ImportDeclaration "import com.netflix.fenzo.TaskScheduler;" compose:Replacement merge: Default]
															[T -> com.netflix.fenzo.VirtualMachineLease{ImportPackage} : ImportDeclaration "import com.netflix.fenzo.VirtualMachineLease;" compose:Replacement merge: Default]
															[T -> com.netflix.fenzo.functions.Action1{ImportPackage} : ImportDeclaration "import com.netflix.fenzo.functions.Action1;" compose:Replacement merge: Default]
															[T -> lombok.extern.slf4j.Slf4j{ImportPackage} : ImportDeclaration "import lombok.extern.slf4j.Slf4j;" compose:Replacement merge: Default]
															[T -> org.apache.curator.framework.recipes.cache.TreeCache{ImportPackage} : ImportDeclaration "import org.apache.curator.framework.recipes.cache.TreeCache;" compose:Replacement merge: Default]
															[T -> org.apache.mesos.MesosSchedulerDriver{ImportPackage} : ImportDeclaration "import org.apache.mesos.MesosSchedulerDriver;" compose:Replacement merge: Default]
															[T -> org.apache.mesos.Protos{ImportPackage} : ImportDeclaration "import org.apache.mesos.Protos;" compose:Replacement merge: Default]
															[T -> org.apache.mesos.SchedulerDriver{ImportPackage} : ImportDeclaration "import org.apache.mesos.SchedulerDriver;" compose:Replacement merge: Default]
															[NT -> MasterBootstrap : ClassDeclaration]
																[T -> - : Modifiers "@Slf4j public final" compose:Replacement merge: SemanticConflict]
																[T -> - : ClassOrInterface1 "class" compose:Replacement merge: Default]
																[T -> MasterBootstrap : Id "MasterBootstrap" compose:Replacement merge: Default]
																[T -> WEBAPP_PATH : FieldDecl "private static final String WEBAPP_PATH = "webapp/";" compose:Replacement merge: SemanticConflict]
																[T -> env : FieldDecl "private final BootstrapEnvironment env;" compose:Replacement merge: SemanticConflict]
																[T -> regCenter : FieldDecl "private final CoordinatorRegistryCenter regCenter;" compose:Replacement merge: SemanticConflict]
																[T -> schedulerDriver : FieldDecl "private final SchedulerDriver schedulerDriver;" compose:Replacement merge: SemanticConflict]
																[T -> restfulServer : FieldDecl "private final RestfulServer restfulServer;" compose:Replacement merge: SemanticConflict]
																[T -> MasterBootstrap({FormalParametersInternal}) : ConstructorDecl "public MasterBootstrap() {         env = BootstrapEnvironment.getInstance();         regCenter = getRegistryCenter();         LeasesQueue leasesQueue = new LeasesQueue();         final FacadeService facadeService = new FacadeService(regCenter);         TaskScheduler taskScheduler = getTaskScheduler();         JobEventBus jobEventBus = getJobEventBus();         final StatisticManager statisticManager = StatisticManager.getInstance(regCenter, env.getJobEventRdbConfiguration());         statisticManager.startup();         schedulerDriver = getSchedulerDriver(leasesQueue, taskScheduler, facadeService, jobEventBus, statisticManager);         restfulServer = new RestfulServer(env.getRestfulServerConfiguration().getPort());         CloudJobRestfulApi.init(schedulerDriver, regCenter);         initConfigurationListener();         final ProducerManager producerManager = ProducerManagerFactory.getInstance(schedulerDriver, regCenter);         producerManager.startup();         new Thread(new TaskLaunchProcessor(leasesQueue, schedulerDriver, taskScheduler, facadeService, jobEventBus), "task-launch-processor-" + Thread.currentThread().getId()).start();         new Thread(new StatisticsProcessor(), "statistics-processor-" + Thread.currentThread().getId()).start();         Runtime.getRuntime().addShutdownHook(new Thread() {                          @Override             public void run() {                 facadeService.stop();                 producerManager.shutdown();                 statisticManager.shutdown();             }         });     }" compose:Replacement merge: LineBased]
																[T -> getRegistryCenter({FormalParametersInternal}) : MethodDecl "private CoordinatorRegistryCenter getRegistryCenter() {         CoordinatorRegistryCenter result = new ZookeeperRegistryCenter(env.getZookeeperConfiguration());         result.init();         return result;     }" compose:Replacement merge: LineBased]
																[T -> getSchedulerDriver(LeasesQueue-LeasesQueue-TaskScheduler-TaskScheduler-FacadeService-FacadeService-JobEventBus-JobEventBus-StatisticManager-StatisticManager) : MethodDecl "private SchedulerDriver getSchedulerDriver(             final LeasesQueue leasesQueue, final TaskScheduler taskScheduler, final FacadeService facadeService, final JobEventBus jobEventBus, final StatisticManager statisticManager) {         MesosConfiguration mesosConfig = env.getMesosConfiguration();         Protos.FrameworkInfo frameworkInfo =                  Protos.FrameworkInfo.newBuilder().setUser(mesosConfig.getUser()).setName(MesosConfiguration.FRAMEWORK_NAME).setHostname(mesosConfig.getHostname()).build();         return new MesosSchedulerDriver(new SchedulerEngine(leasesQueue, taskScheduler, facadeService, jobEventBus, statisticManager), frameworkInfo, mesosConfig.getUrl());     }" compose:Replacement merge: LineBased]
																[T -> getTaskScheduler({FormalParametersInternal}) : MethodDecl "private TaskScheduler getTaskScheduler() {         return new TaskScheduler.Builder()                 .withLeaseOfferExpirySecs(1000000000L)                 .withLeaseRejectAction(new Action1<VirtualMachineLease>() {                                          @Override                     public void call(final VirtualMachineLease lease) {                         log.warn("Declining offer on '{}'", lease.hostname());                         schedulerDriver.declineOffer(lease.getOffer().getId());                     }                 }).build();     }" compose:Replacement merge: LineBased]
																[T -> initConfigurationListener({FormalParametersInternal}) : MethodDecl "private void initConfigurationListener() {         regCenter.addCacheData(ConfigurationNode.ROOT);         ((TreeCache) regCenter.getRawCache(ConfigurationNode.ROOT)).getListenable().addListener(new CloudJobConfigurationListener(schedulerDriver, regCenter));     }" compose:Replacement merge: LineBased]
																[T -> getJobEventBus({FormalParametersInternal}) : MethodDecl "private JobEventBus getJobEventBus() {         Optional<JobEventRdbConfiguration> rdbConfig = env.getJobEventRdbConfiguration();         if (rdbConfig.isPresent()) {             return new JobEventBus(rdbConfig.get());         }         return new JobEventBus();     }" compose:Replacement merge: LineBased]
																[T -> runAsDaemon({FormalParametersInternal}) : MethodDecl "public Protos.Status runAsDaemon() throws Exception {         restfulServer.start(CloudJobRestfulApi.class.getPackage().getName(), WEBAPP_PATH);         return schedulerDriver.run();     }" compose:Replacement merge: LineBased]
																[T -> stop(Protos.Status-Protos.Status) : MethodDecl "public boolean stop(final Protos.Status status) throws Exception {         schedulerDriver.stop();         restfulServer.stop();         return Protos.Status.DRIVER_STOPPED == status;     }" compose:Replacement merge: LineBased]
[NT -> left : Feature]
	[NT -> elastic-job-cloud : Folder]
		[NT -> elastic-job-cloud-scheduler : Folder]
			[NT -> src : Folder]
				[NT -> main : Folder]
					[NT -> java : Folder]
						[NT -> com : Folder]
							[NT -> dangdang : Folder]
								[NT -> ddframe : Folder]
									[NT -> job : Folder]
										[NT -> cloud : Folder]
											[NT -> scheduler : Folder]
												[NT -> boot : Folder]
													[NT -> MasterBootstrap.java.merge : .java.merge-File]
														[T -> MasterBootstrap.java : .java-Content "/*  * Copyright 1999-2015 dangdang.com.  * <p>  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  * </p>  */  package com.dangdang.ddframe.job.cloud.scheduler.boot;  import com.dangdang.ddframe.job.cloud.scheduler.boot.env.BootstrapEnvironment; import com.dangdang.ddframe.job.cloud.scheduler.boot.env.MesosConfiguration; import com.dangdang.ddframe.job.cloud.scheduler.config.CloudJobConfigurationListener; import com.dangdang.ddframe.job.cloud.scheduler.config.ConfigurationNode; import com.dangdang.ddframe.job.cloud.scheduler.ha.FrameworkIDService; import com.dangdang.ddframe.job.cloud.scheduler.mesos.FacadeService; import com.dangdang.ddframe.job.cloud.scheduler.mesos.LeasesQueue; import com.dangdang.ddframe.job.cloud.scheduler.ha.ReconcileScheduledService; import com.dangdang.ddframe.job.cloud.scheduler.mesos.SchedulerEngine; import com.dangdang.ddframe.job.cloud.scheduler.mesos.StatisticsScheduledService; import com.dangdang.ddframe.job.cloud.scheduler.mesos.TaskLaunchScheduledService; import com.dangdang.ddframe.job.cloud.scheduler.producer.ProducerManager; import com.dangdang.ddframe.job.cloud.scheduler.restful.CloudJobRestfulApi; import com.dangdang.ddframe.job.cloud.scheduler.statistics.StatisticManager; import com.dangdang.ddframe.job.event.JobEventBus; import com.dangdang.ddframe.job.event.rdb.JobEventRdbConfiguration; import com.dangdang.ddframe.job.event.rdb.JobEventRdbSearch; import com.dangdang.ddframe.job.reg.base.CoordinatorRegistryCenter; import com.dangdang.ddframe.job.reg.zookeeper.ZookeeperRegistryCenter; import com.dangdang.ddframe.job.restful.RestfulServer; import com.google.common.base.Optional; import com.google.common.util.concurrent.Service; import com.netflix.fenzo.TaskScheduler; import com.netflix.fenzo.VirtualMachineLease; import com.netflix.fenzo.functions.Action1; import lombok.extern.slf4j.Slf4j; import org.apache.curator.framework.recipes.cache.TreeCache; import org.apache.mesos.MesosSchedulerDriver; import org.apache.mesos.Protos; import org.apache.mesos.SchedulerDriver;  import java.util.concurrent.Executors;  /**  * Mesos框架启动器.  *  * @author zhangliang  * @author gaohongtao  */ @Slf4j public final class MasterBootstrap {          private static final String WEBAPP_PATH = "webapp/";          private static final double ONE_WEEK_TIMEOUT = 60 * 60 * 24 * 7;          private final BootstrapEnvironment env;          private final CoordinatorRegistryCenter regCenter;          private final FacadeService facadeService;          private final StatisticManager statisticManager;          private final RestfulServer restfulServer;          private final FrameworkIDService frameworkIDService;          private SchedulerDriver schedulerDriver;          private ProducerManager producerManager;          private CloudJobConfigurationListener cloudJobConfigurationListener;          private Service taskLaunchScheduledService;          private Service statisticsScheduledService;          private Service reconcileScheduledService;          public MasterBootstrap() {         env = BootstrapEnvironment.getInstance();         regCenter = getRegistryCenter();         facadeService = new FacadeService(regCenter);         Optional<JobEventRdbSearch> jobEventRdbSearch = Optional.absent();         if (env.getJobEventRdbConfiguration().isPresent()) {             jobEventRdbSearch = Optional.of(new JobEventRdbSearch(env.getJobEventRdbConfiguration().get().getDataSource()));         }         statisticManager = StatisticManager.getInstance(regCenter, env.getJobEventRdbConfiguration());         restfulServer = new RestfulServer(env.getRestfulServerConfiguration().getPort());         frameworkIDService = new FrameworkIDService(regCenter);         CloudJobRestfulApi.init(regCenter, jobEventRdbSearch);     }          private CoordinatorRegistryCenter getRegistryCenter() {         CoordinatorRegistryCenter result = new ZookeeperRegistryCenter(env.getZookeeperConfiguration());         result.init();         return result;     }          /**      * 以守护进程方式启动.      *       * @throws Exception 启动异常      */     public void start() throws Exception {         LeasesQueue leasesQueue = new LeasesQueue();         TaskScheduler taskScheduler = getTaskScheduler();         JobEventBus jobEventBus = getJobEventBus();         schedulerDriver = getSchedulerDriver(leasesQueue, taskScheduler, jobEventBus);         producerManager = new ProducerManager(schedulerDriver, regCenter);         producerManager.startup();         CloudJobRestfulApi.setContext(schedulerDriver, producerManager);         log.info("Elastic Job: Add configuration listener");         cloudJobConfigurationListener =  new CloudJobConfigurationListener(schedulerDriver, producerManager, regCenter);         getCache().getListenable().addListener(cloudJobConfigurationListener, Executors.newSingleThreadExecutor());         taskLaunchScheduledService = new TaskLaunchScheduledService(leasesQueue, schedulerDriver, taskScheduler, facadeService, jobEventBus).startAsync();         statisticsScheduledService = new StatisticsScheduledService(regCenter).startAsync();         reconcileScheduledService =  ReconcileScheduledService.builder().facadeService(facadeService).scheduler(schedulerDriver).build().startAsync();         statisticManager.startup();         restfulServer.start(CloudJobRestfulApi.class.getPackage().getName(), WEBAPP_PATH);         schedulerDriver.start();     }          private SchedulerDriver getSchedulerDriver(final LeasesQueue leasesQueue, final TaskScheduler taskScheduler, final JobEventBus jobEventBus) {         MesosConfiguration mesosConfig = env.getMesosConfiguration();         Optional<String> frameworkIDOptional = frameworkIDService.fetch();         Protos.FrameworkInfo.Builder builder = Protos.FrameworkInfo.newBuilder();         if (frameworkIDOptional.isPresent()) {             builder.setId(Protos.FrameworkID.newBuilder().setValue(frameworkIDOptional.get()).build());         }         Protos.FrameworkInfo frameworkInfo = builder.setUser(mesosConfig.getUser()).setName(MesosConfiguration.FRAMEWORK_NAME)                         .setHostname(mesosConfig.getHostname()).setFailoverTimeout(ONE_WEEK_TIMEOUT).build();         return new MesosSchedulerDriver(new SchedulerEngine(leasesQueue, taskScheduler, facadeService, jobEventBus, frameworkIDService, statisticManager), frameworkInfo, mesosConfig.getUrl());     }          private TaskScheduler getTaskScheduler() {         return new TaskScheduler.Builder()                 .withLeaseOfferExpirySecs(1000000000L)                 .withLeaseRejectAction(new Action1<VirtualMachineLease>() {                                          @Override                     public void call(final VirtualMachineLease lease) {                         log.warn("Declining offer on '{}'", lease.hostname());                         schedulerDriver.declineOffer(lease.getOffer().getId());                     }                 }).build();     }          private JobEventBus getJobEventBus() {         Optional<JobEventRdbConfiguration> rdbConfig = env.getJobEventRdbConfiguration();         if (rdbConfig.isPresent()) {             return new JobEventBus(rdbConfig.get());         }         return new JobEventBus();     }          private TreeCache getCache() {         TreeCache result = (TreeCache) regCenter.getRawCache(ConfigurationNode.ROOT);         if (null != result) {             return result;         }         regCenter.addCacheData(ConfigurationNode.ROOT);         return (TreeCache) regCenter.getRawCache(ConfigurationNode.ROOT);     }          /**      * 停止运行.      */     public synchronized void stop() {         if (null != taskLaunchScheduledService) {             taskLaunchScheduledService.stopAsync();         }         if (null != statisticsScheduledService) {             statisticsScheduledService.stopAsync();         }         if (null != reconcileScheduledService) {             reconcileScheduledService.stopAsync();         }         restfulServer.stop();         statisticManager.shutdown();         if (null != cloudJobConfigurationListener) {             log.info("Elastic Job: Remove configuration listener");             getCache().getListenable().removeListener(cloudJobConfigurationListener);         }         if (null != producerManager) {             producerManager.shutdown();         }         if (null != schedulerDriver) {             schedulerDriver.stop(true);         }     } } " compose:StringConcatenation merge: LineBased]
[NT -> base : Feature]
	[NT -> elastic-job-cloud : Folder]
		[NT -> elastic-job-cloud-scheduler : Folder]
			[NT -> src : Folder]
				[NT -> main : Folder]
					[NT -> java : Folder]
						[NT -> com : Folder]
							[NT -> dangdang : Folder]
								[NT -> ddframe : Folder]
									[NT -> job : Folder]
										[NT -> cloud : Folder]
											[NT -> scheduler : Folder]
												[NT -> boot : Folder]
													[NT -> MasterBootstrap.java.merge : .java.merge-File]
														[T -> MasterBootstrap.java : .java-Content "/*  * Copyright 1999-2015 dangdang.com.  * <p>  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  * </p>  */  package com.dangdang.ddframe.job.cloud.scheduler.boot;  import com.dangdang.ddframe.job.cloud.scheduler.boot.env.BootstrapEnvironment; import com.dangdang.ddframe.job.cloud.scheduler.boot.env.MesosConfiguration; import com.dangdang.ddframe.job.cloud.scheduler.config.CloudJobConfigurationListener; import com.dangdang.ddframe.job.cloud.scheduler.config.ConfigurationNode; import com.dangdang.ddframe.job.cloud.scheduler.mesos.FacadeService; import com.dangdang.ddframe.job.cloud.scheduler.mesos.LeasesQueue; import com.dangdang.ddframe.job.cloud.scheduler.mesos.SchedulerEngine; import com.dangdang.ddframe.job.cloud.scheduler.mesos.StatisticsProcessor; import com.dangdang.ddframe.job.cloud.scheduler.mesos.TaskLaunchProcessor; import com.dangdang.ddframe.job.cloud.scheduler.producer.ProducerManager; import com.dangdang.ddframe.job.cloud.scheduler.producer.ProducerManagerFactory; import com.dangdang.ddframe.job.cloud.scheduler.restful.CloudJobRestfulApi; import com.dangdang.ddframe.job.cloud.scheduler.statistics.StatisticManager; import com.dangdang.ddframe.job.event.JobEventBus; import com.dangdang.ddframe.job.event.rdb.JobEventRdbConfiguration; import com.dangdang.ddframe.job.event.rdb.JobEventRdbSearch; import com.dangdang.ddframe.job.reg.base.CoordinatorRegistryCenter; import com.dangdang.ddframe.job.reg.zookeeper.ZookeeperRegistryCenter; import com.dangdang.ddframe.job.restful.RestfulServer; import com.google.common.base.Optional; import com.netflix.fenzo.TaskScheduler; import com.netflix.fenzo.VirtualMachineLease; import com.netflix.fenzo.functions.Action1; import lombok.extern.slf4j.Slf4j;  import org.apache.curator.framework.recipes.cache.TreeCache; import org.apache.mesos.MesosSchedulerDriver; import org.apache.mesos.Protos; import org.apache.mesos.SchedulerDriver;  /**  * Mesos框架启动器.  *  * @author zhangliang  */ @Slf4j public final class MasterBootstrap {          private static final String WEBAPP_PATH = "webapp/";          private final BootstrapEnvironment env;          private final CoordinatorRegistryCenter regCenter;          private final SchedulerDriver schedulerDriver;          private final RestfulServer restfulServer;          public MasterBootstrap() {         env = BootstrapEnvironment.getInstance();         regCenter = getRegistryCenter();         LeasesQueue leasesQueue = new LeasesQueue();         final FacadeService facadeService = new FacadeService(regCenter);         TaskScheduler taskScheduler = getTaskScheduler();         JobEventBus jobEventBus = getJobEventBus();         Optional<JobEventRdbSearch> jobEventRdbSearch = Optional.absent();         if (env.getJobEventRdbConfiguration().isPresent()) {             jobEventRdbSearch = Optional.of(new JobEventRdbSearch(env.getJobEventRdbConfiguration().get().getDataSource()));         }         final StatisticManager statisticManager = StatisticManager.getInstance(regCenter, env.getJobEventRdbConfiguration());         statisticManager.startup();         schedulerDriver = getSchedulerDriver(leasesQueue, taskScheduler, facadeService, jobEventBus, statisticManager);         restfulServer = new RestfulServer(env.getRestfulServerConfiguration().getPort());         CloudJobRestfulApi.init(schedulerDriver, regCenter, jobEventRdbSearch);         initConfigurationListener();         final ProducerManager producerManager = ProducerManagerFactory.getInstance(schedulerDriver, regCenter);         producerManager.startup();         new Thread(new TaskLaunchProcessor(leasesQueue, schedulerDriver, taskScheduler, facadeService, jobEventBus), "task-launch-processor-" + Thread.currentThread().getId()).start();         new Thread(new StatisticsProcessor(), "statistics-processor-" + Thread.currentThread().getId()).start();         Runtime.getRuntime().addShutdownHook(new Thread() {                          @Override             public void run() {                 facadeService.stop();                 producerManager.shutdown();                 statisticManager.shutdown();             }         });     }          private CoordinatorRegistryCenter getRegistryCenter() {         CoordinatorRegistryCenter result = new ZookeeperRegistryCenter(env.getZookeeperConfiguration());         result.init();         return result;     }          private SchedulerDriver getSchedulerDriver(             final LeasesQueue leasesQueue, final TaskScheduler taskScheduler, final FacadeService facadeService, final JobEventBus jobEventBus, final StatisticManager statisticManager) {         MesosConfiguration mesosConfig = env.getMesosConfiguration();         Protos.FrameworkInfo frameworkInfo =                  Protos.FrameworkInfo.newBuilder().setUser(mesosConfig.getUser()).setName(MesosConfiguration.FRAMEWORK_NAME).setHostname(mesosConfig.getHostname()).build();         return new MesosSchedulerDriver(new SchedulerEngine(leasesQueue, taskScheduler, facadeService, jobEventBus, statisticManager), frameworkInfo, mesosConfig.getUrl());     }          private TaskScheduler getTaskScheduler() {         return new TaskScheduler.Builder()                 .withLeaseOfferExpirySecs(1000000000L)                 .withLeaseRejectAction(new Action1<VirtualMachineLease>() {                                          @Override                     public void call(final VirtualMachineLease lease) {                         log.warn("Declining offer on '{}'", lease.hostname());                         schedulerDriver.declineOffer(lease.getOffer().getId());                     }                 }).build();     }          private void initConfigurationListener() {         regCenter.addCacheData(ConfigurationNode.ROOT);         ((TreeCache) regCenter.getRawCache(ConfigurationNode.ROOT)).getListenable().addListener(new CloudJobConfigurationListener(schedulerDriver, regCenter));     }          private JobEventBus getJobEventBus() {         Optional<JobEventRdbConfiguration> rdbConfig = env.getJobEventRdbConfiguration();         if (rdbConfig.isPresent()) {             return new JobEventBus(rdbConfig.get());         }         return new JobEventBus();     }          /**      * 以守护进程方式启动.      *       * @return 框架运行状态      * @throws Exception 运行时异常      */     public Protos.Status runAsDaemon() throws Exception {         restfulServer.start(CloudJobRestfulApi.class.getPackage().getName(), WEBAPP_PATH);         return schedulerDriver.run();     }          /**      * 停止运行.      *       * @param status 框架运行状态      * @return 是否正常停止      * @throws Exception 运行时异常      */     public boolean stop(final Protos.Status status) throws Exception {         schedulerDriver.stop();         restfulServer.stop();         return Protos.Status.DRIVER_STOPPED == status;     } } " compose:StringConcatenation merge: LineBased]
[NT -> right : Feature]
	[NT -> elastic-job-cloud : Folder]
		[NT -> elastic-job-cloud-scheduler : Folder]
			[NT -> src : Folder]
				[NT -> main : Folder]
					[NT -> java : Folder]
						[NT -> com : Folder]
							[NT -> dangdang : Folder]
								[NT -> ddframe : Folder]
									[NT -> job : Folder]
										[NT -> cloud : Folder]
											[NT -> scheduler : Folder]
												[NT -> boot : Folder]
													[NT -> MasterBootstrap.java.merge : .java.merge-File]
														[T -> MasterBootstrap.java : .java-Content "/*  * Copyright 1999-2015 dangdang.com.  * <p>  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  * </p>  */  package com.dangdang.ddframe.job.cloud.scheduler.boot;  import com.dangdang.ddframe.job.cloud.scheduler.boot.env.BootstrapEnvironment; import com.dangdang.ddframe.job.cloud.scheduler.boot.env.MesosConfiguration; import com.dangdang.ddframe.job.cloud.scheduler.config.CloudJobConfigurationListener; import com.dangdang.ddframe.job.cloud.scheduler.config.ConfigurationNode; import com.dangdang.ddframe.job.cloud.scheduler.mesos.FacadeService; import com.dangdang.ddframe.job.cloud.scheduler.mesos.LeasesQueue; import com.dangdang.ddframe.job.cloud.scheduler.mesos.SchedulerEngine; import com.dangdang.ddframe.job.cloud.scheduler.mesos.StatisticsProcessor; import com.dangdang.ddframe.job.cloud.scheduler.mesos.TaskLaunchProcessor; import com.dangdang.ddframe.job.cloud.scheduler.producer.ProducerManager; import com.dangdang.ddframe.job.cloud.scheduler.producer.ProducerManagerFactory; import com.dangdang.ddframe.job.cloud.scheduler.restful.CloudJobRestfulApi; import com.dangdang.ddframe.job.cloud.scheduler.statistics.StatisticManager; import com.dangdang.ddframe.job.event.JobEventBus; import com.dangdang.ddframe.job.event.rdb.JobEventRdbConfiguration; import com.dangdang.ddframe.job.reg.base.CoordinatorRegistryCenter; import com.dangdang.ddframe.job.reg.zookeeper.ZookeeperRegistryCenter; import com.dangdang.ddframe.job.restful.RestfulServer; import com.google.common.base.Optional; import com.netflix.fenzo.TaskScheduler; import com.netflix.fenzo.VirtualMachineLease; import com.netflix.fenzo.functions.Action1; import lombok.extern.slf4j.Slf4j;  import org.apache.curator.framework.recipes.cache.TreeCache; import org.apache.mesos.MesosSchedulerDriver; import org.apache.mesos.Protos; import org.apache.mesos.SchedulerDriver;  /**  * Mesos框架启动器.  *  * @author zhangliang  */ @Slf4j public final class MasterBootstrap {          private static final String WEBAPP_PATH = "webapp/";          private final BootstrapEnvironment env;          private final CoordinatorRegistryCenter regCenter;          private final SchedulerDriver schedulerDriver;          private final RestfulServer restfulServer;          public MasterBootstrap() {         env = BootstrapEnvironment.getInstance();         regCenter = getRegistryCenter();         LeasesQueue leasesQueue = new LeasesQueue();         final FacadeService facadeService = new FacadeService(regCenter);         TaskScheduler taskScheduler = getTaskScheduler();         JobEventBus jobEventBus = getJobEventBus();         final StatisticManager statisticManager = StatisticManager.getInstance(regCenter, env.getJobEventRdbConfiguration());         statisticManager.startup();         schedulerDriver = getSchedulerDriver(leasesQueue, taskScheduler, facadeService, jobEventBus, statisticManager);         restfulServer = new RestfulServer(env.getRestfulServerConfiguration().getPort());         CloudJobRestfulApi.init(schedulerDriver, regCenter);         initConfigurationListener();         final ProducerManager producerManager = ProducerManagerFactory.getInstance(schedulerDriver, regCenter);         producerManager.startup();         new Thread(new TaskLaunchProcessor(leasesQueue, schedulerDriver, taskScheduler, facadeService, jobEventBus), "task-launch-processor-" + Thread.currentThread().getId()).start();         new Thread(new StatisticsProcessor(), "statistics-processor-" + Thread.currentThread().getId()).start();         Runtime.getRuntime().addShutdownHook(new Thread() {                          @Override             public void run() {                 facadeService.stop();                 producerManager.shutdown();                 statisticManager.shutdown();             }         });     }          private CoordinatorRegistryCenter getRegistryCenter() {         CoordinatorRegistryCenter result = new ZookeeperRegistryCenter(env.getZookeeperConfiguration());         result.init();         return result;     }          private SchedulerDriver getSchedulerDriver(             final LeasesQueue leasesQueue, final TaskScheduler taskScheduler, final FacadeService facadeService, final JobEventBus jobEventBus, final StatisticManager statisticManager) {         MesosConfiguration mesosConfig = env.getMesosConfiguration();         Protos.FrameworkInfo frameworkInfo =                  Protos.FrameworkInfo.newBuilder().setUser(mesosConfig.getUser()).setName(MesosConfiguration.FRAMEWORK_NAME).setHostname(mesosConfig.getHostname()).build();         return new MesosSchedulerDriver(new SchedulerEngine(leasesQueue, taskScheduler, facadeService, jobEventBus, statisticManager), frameworkInfo, mesosConfig.getUrl());     }          private TaskScheduler getTaskScheduler() {         return new TaskScheduler.Builder()                 .withLeaseOfferExpirySecs(1000000000L)                 .withLeaseRejectAction(new Action1<VirtualMachineLease>() {                                          @Override                     public void call(final VirtualMachineLease lease) {                         log.warn("Declining offer on '{}'", lease.hostname());                         schedulerDriver.declineOffer(lease.getOffer().getId());                     }                 }).build();     }          private void initConfigurationListener() {         regCenter.addCacheData(ConfigurationNode.ROOT);         ((TreeCache) regCenter.getRawCache(ConfigurationNode.ROOT)).getListenable().addListener(new CloudJobConfigurationListener(schedulerDriver, regCenter));     }          private JobEventBus getJobEventBus() {         Optional<JobEventRdbConfiguration> rdbConfig = env.getJobEventRdbConfiguration();         if (rdbConfig.isPresent()) {             return new JobEventBus(rdbConfig.get());         }         return new JobEventBus();     }          /**      * 以守护进程方式启动.      *       * @return 框架运行状态      * @throws Exception 运行时异常      */     public Protos.Status runAsDaemon() throws Exception {         restfulServer.start(CloudJobRestfulApi.class.getPackage().getName(), WEBAPP_PATH);         return schedulerDriver.run();     }          /**      * 停止运行.      *       * @param status 框架运行状态      * @return 是否正常停止      * @throws Exception 运行时异常      */     public boolean stop(final Protos.Status status) throws Exception {         schedulerDriver.stop();         restfulServer.stop();         return Protos.Status.DRIVER_STOPPED == status;     } } " compose:StringConcatenation merge: LineBased]
